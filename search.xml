<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/01/28/2020-01-28-Android%E5%B8%83%E5%B1%80-ConstrainLayout/"/>
      <url>/2021/01/28/2020-01-28-Android%E5%B8%83%E5%B1%80-ConstrainLayout/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="ConstrainLayout"><a href="#ConstrainLayout" class="headerlink" title="ConstrainLayout"></a>ConstrainLayout</h1><p><a href="https://onlyloveyd.blog.csdn.net/article/details/82915303">https://onlyloveyd.blog.csdn.net/article/details/82915303</a></p><p><a href="https://blog.csdn.net/shulianghan/article/details/97246870">https://blog.csdn.net/shulianghan/article/details/97246870</a></p><blockquote><p>约束布局 如何使用 有何优势呢?</p></blockquote><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> Android基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Android -Layout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓逆向学习2</title>
      <link href="/2020/01/12/2020-01-12-Android%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A02-2020/"/>
      <url>/2020/01/12/2020-01-12-Android%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A02-2020/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="进入Dalvik虚拟机"><a href="#进入Dalvik虚拟机" class="headerlink" title="进入Dalvik虚拟机"></a>进入Dalvik虚拟机</h1><h2 id="虚拟机特点"><a href="#虚拟机特点" class="headerlink" title="虚拟机特点"></a>虚拟机特点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>体积小,占用内存小</li><li>专有dex(Dalvik executable file)体积更小,执行速度更快</li><li>常量池采用32位索引值,寻址类方法名,字段名,常量更快</li><li>基于寄存器架构,并拥有一套完整的指令系统</li><li>提供了对象生命周期管理,堆栈管理 ,线程管理,安全和异常管理以及垃圾回收等重要功能</li><li>所有Android程序都运行在Android系统进程里, 每个进程对应一个Dalvik虚拟机</li></ul><h3 id="与Java虚拟机区别"><a href="#与Java虚拟机区别" class="headerlink" title="与Java虚拟机区别"></a>与Java虚拟机区别</h3><p>Java 字节码 ,Dalvik字节码</p><span id="more"></span> <h2 id="Dalvik汇编语言基础为分析Android应用程序做准备"><a href="#Dalvik汇编语言基础为分析Android应用程序做准备" class="headerlink" title="Dalvik汇编语言基础为分析Android应用程序做准备"></a>Dalvik汇编语言基础为分析Android应用程序做准备</h2><blockquote><p>Dalvik虚拟机为自己专门设计了一套指令集, 并且制定了自己的指令格式与调用规范</p></blockquote><h3 id="Dalvik指令格式"><a href="#Dalvik指令格式" class="headerlink" title="Dalvik指令格式"></a>Dalvik指令格式</h3><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓逆向学习1</title>
      <link href="/2020/01/11/2020-01-11-Android%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A01-2020/"/>
      <url>/2020/01/11/2020-01-11-Android%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A01-2020/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><span id="more"></span> <h1 id="keytool的使用"><a href="#keytool的使用" class="headerlink" title="keytool的使用"></a>keytool的使用</h1><p>签名生成</p><pre class="line-numbers language-shell"><code class="language-shell">keytool -genkeypair -alias <alias> -keystore <store_name.jks> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>签名查询</p><pre class="line-numbers language-shell"><code class="language-shell">keytool -list -keystore <store_name.jks> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给apk签名</p><pre class="line-numbers language-shell"><code class="language-shell">jarsigner -verbose -keystore <keystore path> -signedjar <target apk name>  <src apk><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="使用apktool反编-重新打包apk"><a href="#使用apktool反编-重新打包apk" class="headerlink" title="使用apktool反编|重新打包apk"></a>使用apktool反编|重新打包apk</h1><p>反编译生成smali</p><pre class="line-numbers language-shell"><code class="language-shell">apktool -r d xx.apk    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反编译生成dex</p><pre class="line-numbers language-shell"><code class="language-shell">apktool -r -s d xx.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新打包生成apk</p><pre class="line-numbers language-shell"><code class="language-shell">apktool b xx.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意重新打包需要使用<code>jarsigner</code>或<code>apksigner</code>重新签名</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><pre><code>apktool反编译-&gt;修改smali-&gt;重新打包-&gt;重新签名</code></pre><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>一些工具集合</p><table><thead><tr><th align="left">名称</th><th align="left">描述</th><th>地址</th></tr></thead><tbody><tr><td align="left">apktool</td><td align="left">android反编译工具</td><td><a href="https://ibotpeaches.github.io/Apktool/">https://ibotpeaches.github.io/Apktool/</a></td></tr><tr><td align="left">dex2jar</td><td align="left">android dex文件转jar</td><td><a href="https://github.com/pxb1988/dex2jar">https://github.com/pxb1988/dex2jar</a></td></tr><tr><td align="left">jd-gui</td><td align="left">java反编译工具</td><td><a href="http://java-decompiler.github.io/">http://java-decompiler.github.io/</a></td></tr><tr><td align="left">jadx</td><td align="left">Dex to Java decompiler</td><td><a href="https://github.com/skylot/jadx">https://github.com/skylot/jadx</a></td></tr><tr><td align="left">jeb</td><td align="left">PNF公司出品的反编译工具</td><td><a href="https://www.pnfsoftware.com/">https://www.pnfsoftware.com/</a></td></tr><tr><td align="left">pkid</td><td align="left">查壳工具</td><td></td></tr><tr><td align="left">//todo</td><td align="left">脱壳工具</td><td></td></tr><tr><td align="left">npmanager</td><td align="left">类似于mt管理器的app</td><td></td></tr><tr><td align="left">IDA pro</td><td align="left">静态分析工具</td><td>学习版</td></tr><tr><td align="left"></td><td align="left"></td><td></td></tr></tbody></table><p>一些手机上的插件以及应用合集</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>magisk</td><td></td><td></td></tr><tr><td>frida</td><td></td><td></td></tr><tr><td>xposed</td><td></td><td></td></tr></tbody></table><p>一些破解过的app以及分析</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内联函数与性能优化</title>
      <link href="/2019/11/25/2019-12-03-Java%E5%85%B3%E4%BA%8E%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-2019/"/>
      <url>/2019/11/25/2019-12-03-Java%E5%85%B3%E4%BA%8E%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-2019/</url>
      
        <content type="html"><![CDATA[<blockquote><p>内联函数在Java中的应用</p></blockquote><span id="more"></span> <h1 id="什么是函数内联"><a href="#什么是函数内联" class="headerlink" title="什么是函数内联"></a>什么是函数内联</h1><p>调用某个函数实际上将程序执行顺序转移到该函数所存放在内存中某个地址，将函数的程序内容执行完后，再返回到<br>转去执行该函数前的地方。这种转移操作要求在转去前要保护现场并记忆执行的地址，转回后先要恢复现场，并按原来保<br>存地址继续执行。也就是通常说的压栈和出栈。因此，函数调用要有一定的时间和空间方面的开销。那么对于那些函数体<br>代码不是很大，又频繁调用的函数来说，这个时间和空间的消耗会很大。</p><p>  那怎么解决这个性能消耗问题呢，这个时候需要引入内联函数了。内联函数就是在程序编译时，编译器将程序中出现<br>的内联函数的调用表达式用内联函数的函数体来直接进行替换。显然，这样就不会产生转去转回的问题，但是由于在编译<br>时将函数体中的代码被替代到程序中，因此会增加目标程序代码量，进而增加空间开销，而在时间代销上不象函数调用时<br>那么大，可见它是以目标代码的增加为代价来换取时间的节省。</p><p>  在大学里学习写C代码时，我们都学到将一些简短的逻辑定义在宏里。这样做的好处是，在编译器编译的时候会将用<br>到该宏的地方直接用宏的代码替换。这样就不再需要象调用方法那样的压栈、出栈，传参了。性能上提升了。内联函数的<br>处理方式与宏类似，但与宏又有所不同，内联函数拥有函数的本身特性（类型、作用域等等）</p><p>  写过C++代码的应该都知道，在C++里有个内联函数，使用inline关键字修饰。另外，写在Class定义内的函数也会被<br>编译器视为内联函数。</p><p>那么，在java中的内联函数长什么模样呢？在java中使用final关键字来指示一个函数为内联函数，例如：Java代码 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TODO </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  这个指示并不是必需的。final关键字只是告诉编译器，在编译的时候考虑性能的提升，可以将final函数视为内联函数。<br>但最后编译器会怎么处理，编译器会分析将final函数处理为内联和不处理为内联的性能比较了。</p><h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">convertByteToColor</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> l1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> arg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            arg <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一般RGB字节数组的长度应该是3的倍数，</span>        <span class="token comment" spellcheck="true">// 不排除有特殊情况，多余的RGB数据用黑色0XFF000000填充</span>        <span class="token comment" spellcheck="true">// ((data >> 4) &amp; 0x0F) * 16 + (0x0F &amp; data);</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">+</span> arg<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">;</span>        <span class="token keyword">int</span> colorLen <span class="token operator">=</span> color<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colorLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果图像很大,需要很多for循环,内联convertByteToInt将会提升很大效率.</span>                <span class="token comment" spellcheck="true">//inline the function to improve performance.</span>                red <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x0F</span> <span class="token operator">&amp;</span> data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                green <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x0F</span> <span class="token operator">&amp;</span> data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x0F</span> <span class="token operator">&amp;</span> data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 获取RGB分量值通过按位或生成int的像素值</span>                color<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>red <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>green <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> blue <span class="token operator">|</span> <span class="token number">0xFF000000</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colorLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                red <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x0F</span> <span class="token operator">&amp;</span> data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                green <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x0F</span> <span class="token operator">&amp;</span> data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x0F</span> <span class="token operator">&amp;</span> data<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                color<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>red <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>green <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> blue <span class="token operator">|</span> <span class="token number">0xFF000000</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            color<span class="token punctuation">[</span>colorLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xFF000000</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> l2 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"hefuduo_yoda"</span><span class="token punctuation">,</span> <span class="token string">"the cost of convertbyteToColors = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>l2 <span class="token operator">-</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param data     * @return     */</span> <span class="token comment" spellcheck="true">//将这个函数内联将会显著提升代码的执行效率.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">convertByteToInt</span><span class="token punctuation">(</span><span class="token keyword">byte</span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x0F</span> <span class="token operator">&amp;</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合分析8</title>
      <link href="/2019/11/14/2019-11-14-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%908-2019/"/>
      <url>/2019/11/14/2019-11-14-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%908-2019/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h2 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h2><h2 id="Shell-排序"><a href="#Shell-排序" class="headerlink" title="Shell 排序"></a>Shell 排序</h2><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合分析7</title>
      <link href="/2019/11/13/2019-11-13-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%907-2019/"/>
      <url>/2019/11/13/2019-11-13-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%907-2019/</url>
      
        <content type="html"><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合分析6</title>
      <link href="/2019/11/09/2019-11-09-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%906-2019/"/>
      <url>/2019/11/09/2019-11-09-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%906-2019/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h1><h2 id="一般想法"><a href="#一般想法" class="headerlink" title="一般想法"></a>一般想法</h2><p>每个<strong>key</strong>都能完美的映射到表中.</p><span id="more"></span><h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h2><p>不存在完美的映射, 需要一个高效的函数 p = f(key). f称为散列函数. 通常, 关键字是一个字符串, 散列函数需要很好的选择</p><ol><li><p>把字符串中字符的ASCII码或UniCode码的值加起来</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//缺陷, 如果表很大, 函数将会不好分配, 例如key最多8个字符, 那么散列函数最多分配 127 * 8 = 1016 之间.</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">int</span> tableSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">int</span> hashVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   hashVal <span class="token operator">+=</span> key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">return</span> hashVal <span class="token operator">%</span> tableSize<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个稍微好的散列函数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">int</span> tableSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">int</span> hashVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   hashVal <span class="token operator">=</span> <span class="token number">37</span> <span class="token operator">+</span> hashVal <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> hashVal <span class="token operator">%=</span> tableSize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//允许溢出</span> <span class="token keyword">if</span><span class="token punctuation">(</span>hashVal <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   hashVal <span class="token operator">+=</span> tableSize<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> hashVal<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Hornor 法则:有一些关于多项式求值的问题。对于多项式求值问题，我们最容易想到的算法是求出每一项的值然后把所求的值累加起来，这种算法的时间和空间效率都不高，对于数据规模不大的题目来说由于其直观、简单很容易被大家采纳，可一旦数据规模过大时，这种算法就显得无能为力了，下面介绍一种解决这类求值问题的高效算法――霍纳法则。在中国，霍纳法则也被称为秦九韶算法。</p></blockquote></li></ol><p>Java中<strong>HashCode</strong>的实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Returns a hash code for this string. The hash code for a     * &amp;#123;@code String&amp;#125; object is computed as     * &lt;blockquote>&lt;pre>     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]  //多项式求和     * &lt;/pre>&lt;/blockquote>     * using &amp;#123;@code int&amp;#125; arithmetic, where &amp;#123;@code s[i]&amp;#125; is the     * &lt;i>i&lt;/i>th character of the string, &amp;#123;@code n&amp;#125; is the length of     * the string, and &amp;#123;@code ^&amp;#125; indicates exponentiation.     * (The hash value of the empty string is zero.)     *     * @return  a hash code value for this object.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            hash <span class="token operator">=</span> h<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个有趣的讨论</p><p><a href="https://stackoverflow.com/questions/299304/why-does-javas-hashcode-in-string-use-31-as-a-multiplier">Why does Java’s hashCode() in String use 31 as a multiplier?</a></p><p>结论推测为早期的JVM优化31作为乘子可以优化 <code>i* 31 = (i &lt;&lt; 5) - i</code> , 不过随着现代编译器的性能优化, 这个可能也不算是一个非常大的问题.</p><!-- more --><h2 id="解决冲突-分离链法"><a href="#解决冲突-分离链法" class="headerlink" title="解决冲突: 分离链法"></a>解决冲突: 分离链法</h2><p>将散列到同一个值的所有元素保存到一个表中.</p><p><img src="https://images2018.cnblogs.com/blog/1262741/201808/1262741-20180803142614770-127102873.png"></p><h3 id="HashMap的源码解读"><a href="#HashMap的源码解读" class="headerlink" title="HashMap的源码解读"></a>HashMap的源码解读</h3><h4 id="基本构成"><a href="#基本构成" class="headerlink" title="基本构成"></a>基本构成</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> Serializable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承自AbstractMap实现了Map的接口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//节点 理论上是一个链表中的节点.</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>        <span class="token keyword">final</span> K key<span class="token punctuation">;</span>        V value<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//冲突 桶中指向下一个节点.</span>        <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> K <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">setValue</span><span class="token punctuation">(</span>V newValue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            V oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>            value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**      Key 和value 都相等才相等. (比较两个节点.)  */</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//TreeNode  待定 后续讲到Java8 将桶优化为红黑树再详细说明.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义的一些常量</span> <span class="token comment" spellcheck="true">/**     * The load factor for the hash table.     *    加载因子是表示Hsah表中元素的填满的程度.若:加载因子越大,填满的元素越多,好处是,空间利用率高了,但:冲突的机会加大了.反之,加载因子越小,填满的元                素越少,好处是:冲突的机会减小了,但:空间浪费多了.     * @serial     */</span>    <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**     * The next size value at which to resize (capacity * load factor).     *     * @serial     */</span>    <span class="token comment" spellcheck="true">// (The javadoc description is true upon serialization.</span>    <span class="token comment" spellcheck="true">// Additionally, if the table array has not been allocated, this</span>    <span class="token comment" spellcheck="true">// field holds the initial array capacity, or zero signifying</span>    <span class="token comment" spellcheck="true">// DEFAULT_INITIAL_CAPACITY.)</span>    <span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义的一些常量</span>    <span class="token comment" spellcheck="true">/**     * The default initial capacity - MUST be a power of two. 默认的初始化容量 必须是2的指数个     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span> <span class="token comment" spellcheck="true">/**     * The maximum capacity, used if a higher value is implicitly specified     * by either of the constructors with arguments.     * MUST be a power of two &lt;= 1&lt;&lt;30.  最大容量     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*1 &lt;&lt; 32 = 11 &lt;&lt; 31 = -21474836481 &lt;&lt; 30 = 1073741824*/</span> <span class="token comment" spellcheck="true">/**         * The bin count threshold for using a tree rather than list for a     * bin.  Bins are converted to trees when adding an element to a     * bin with at least this many nodes. The value must be greater     * than 2 and should be at least 8 to mesh with assumptions in     * tree removal about conversion back to plain bins upon     * shrinkage.         桶的形态发生改变的阈值. 链表向树形态变换的临界值     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**      桶的形态发生改变的阈值. 树向链表形态变换的临界值     * The bin count threshold for untreeifying a (split) bin during a     * resize operation. Should be less than TREEIFY_THRESHOLD, and at     * most 6 to mesh with shrinkage detection under removal.     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**         TODO explain      * The smallest table capacity for which bins may be treeified.     * (Otherwise the table is resized if too many nodes in a bin.)     * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts     * between resizing and treeification thresholds.     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*     * Holds cached entrySet(). Note that AbstractMap fields are used     * for keySet() and values().     */</span>    <span class="token keyword">transient</span> Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> entrySet<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**        HashMap的桶     * The table, initialized on first use, and resized as     * necessary. When allocated, length is always a power of two.     * (We also tolerate length zero in some operations to allow     * bootstrapping mechanics that are currently not needed.)     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**     * The number of key-value mappings contained in this map.     */</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The number of times this HashMap has been structurally modified     * Structural modifications are those that change the number of mappings in     * the HashMap or otherwise modify its internal structure (e.g.,     * rehash).  This field is used to make iterators on Collection-views of     * the HashMap fail-fast.  (See ConcurrentModificationException).     */</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * Constructs an empty &lt;tt>HashMap&lt;/tt> with the specified initial     * capacity and load factor.     *     * @param  initialCapacity the initial capacity  2的指数次幂个.     * @param  loadFactor      the load factor     * @throws IllegalArgumentException if the initial capacity is negative     *         or the load factor is nonpositive     */</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>            initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                               loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**     * Constructs an empty &lt;tt>HashMap&lt;/tt> with the specified initial     * capacity and the default load factor (0.75).     *     * @param  initialCapacity the initial capacity.     * @throws IllegalArgumentException if the initial capacity is negative.     */</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  3/4 * 16 = 12个</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// all other fields defaulted</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span>        <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hash函数的原理解释, 可以参考<a href="https://www.hollischuang.com/archives/2091">hash函数的原理解读</a></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Computes key.hashCode() and spreads (XORs) higher bits of hash     * to lower.  Because the table uses power-of-two masking, sets of     * hashes that vary only in bits above the current mask will     * always collide. (Among known examples are sets of Float keys     * holding consecutive whole numbers in small tables.)  So we     * apply a transform that spreads the impact of higher bits     * downward. There is a tradeoff between speed, utility, and     * quality of bit-spreading. Because many common sets of hashes     * are already reasonably distributed (so don't benefit from     * spreading), and because we use trees to handle large sets of     * collisions in bins, we just XOR some shifted bits in the     * cheapest possible way to reduce systematic lossage, as well as     * to incorporate impact of the highest bits that would otherwise     * never be used in index calculations because of table bounds.     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> h<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwNDA4MTgzNjUxMTEx?x-oss-process=image/format,png" alt="img"></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Returns a power of two size for the given target capacity.      此方法用与找到大于等于给定cap最接近的指数幂     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*首先，为什么要对cap做减1操作。int n = cap - 1;这是为了防止，cap已经是2的幂。如果cap已经是2的幂， 又没有执行这个减1操作，则执行完后面的几条无符号右移操作之后，返回的capacity将是这个cap的2倍。如果不懂，要看完后面的几个无符号右移之后再回来看看。*/</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*      注意，容量最大也就是32bit的正数，因此最后n |= n >>> 16; ，最多也就32个1（但是这已经是负数了。在执行tableSizeFor之前，对initialCapacity做了判断，如果大于MAXIMUM_CAPACITY(2 ^ 30)，则取MAXIMUM_CAPACITY。如果等于MAXIMUM_CAPACITY(2 ^ 30)，会执行移位操作。所以这里面的移位操作之后，最大30个1，不会大于等于MAXIMUM_CAPACITY。30个1，加1之后得2 ^ 30）      */</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 初始化或者扩容两倍 * Initializes or doubles table size.  If null, allocates in * accord with initial capacity target held in field threshold. * Otherwise, because we are using power-of-two expansion, the * elements from each bin must either stay at same index, or move * with a power of two offset in the new table. * * @return the table */</span><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//old capacity</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果旧容量大于0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果旧容量大于等于最大容量。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//</span>            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果(newCap = oldCap 的2倍)&lt; 最大容量并且 oldCap >= 初始化容量</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                 oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// initial capacity was placed in threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// zero initial threshold signifies using defaults</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//将oldTab赋值给newTab</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">// 将红黑树拆分成链表.</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// preserve order</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * Associates the specified value with the specified key in this map.     * If the map previously contained a mapping for the key, the old     * value is replaced.     *     * @param key key with which the specified value is to be associated     * @param value value to be associated with the specified key     * @return the previous value associated with &lt;tt>key&lt;/tt>, or     *         &lt;tt>null&lt;/tt> if there was no mapping for &lt;tt>key&lt;/tt>.     *         (A &lt;tt>null&lt;/tt> return can also indicate that the map     *         previously associated &lt;tt>null&lt;/tt> with &lt;tt>key&lt;/tt>.)     */</span>    <span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**     * Implements Map.put and related methods     *     * @param hash hash for key     * @param key the key     * @param value the value to put     * @param onlyIfAbsent if true, don't change existing value     * @param evict if false, the table is in creation mode.     * @return previous value, or null if none     */</span>    <span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//桶， 这个就是存储元素的桶 = table （field of class）</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>          Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span>                 <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>                V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合分析5</title>
      <link href="/2019/10/16/2019-10-16-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%905-2019/"/>
      <url>/2019/10/16/2019-10-16-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%905-2019/</url>
      
        <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h2><p>节点, 根, 兄弟节点,父子节点, 深度, 路径, 高度 ,边</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树的概念</p><p>表达式树 (使用栈构造表达式树)</p><h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><blockquote><p>对于树中的每一个节点X, 它的左子树中所有项的值小于X中的项, 右子树中的所有值大于X中的项目; 这意味着这种树可以用某一种方式排序</p></blockquote><h2 id="平衡二叉查找树"><a href="#平衡二叉查找树" class="headerlink" title="平衡二叉查找树"></a>平衡二叉查找树</h2><blockquote><p>对于树中的每一个节点, 左子树和右子树的高度差小于等于1.</p></blockquote><h2 id="伸展树"><a href="#伸展树" class="headerlink" title="伸展树"></a>伸展树</h2><blockquote><p>不记录高度, 每次查找一个元素的时候, 都将这个元素通过一系列的旋转操作移动到根部(如果一个元素被访问了, 那么下次被访问的可能性会变大)</p><p>摊还时间复杂度O(M*LgN) M此操作的时间复杂度.</p></blockquote><h2 id="再谈树的遍历"><a href="#再谈树的遍历" class="headerlink" title="再谈树的遍历"></a>再谈树的遍历</h2><ol><li>前序. 中序. 后续遍历</li><li>层序遍历</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用队列(或者表)装载每层的元素, 每次出队一个元素,把该元素的下一层子节点全部入队(每层全部出队后, 下一层的子节点也已经入队了.)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printTreeWithLevel</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  TreeNode curNode <span class="token operator">=</span> null<span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        curNode <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"data = "</span> <span class="token operator">+</span> curNode<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><h2 id="TreeSet和TreeMap类的实现-将在12章红黑树中"><a href="#TreeSet和TreeMap类的实现-将在12章红黑树中" class="headerlink" title="TreeSet和TreeMap类的实现, 将在12章红黑树中"></a>TreeSet和TreeMap类的实现, 将在12章红黑树中</h2><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合分析3</title>
      <link href="/2019/10/10/2019-10-10-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%903-2019/"/>
      <url>/2019/10/10/2019-10-10-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%903-2019/</url>
      
        <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈的实现其实有两种, 一种是使用Vector实现的, 一种是使用队列行数据结构实现的具体参考一下两种方式</p><h2 id="实现方式1-线程安全的"><a href="#实现方式1-线程安全的" class="headerlink" title="实现方式1 线程安全的"></a>实现方式1 线程安全的</h2><blockquote><p>写在前面, 在讲栈之前, 先要讲一下Vector, Vector其实是类似于ArrayList的, 其内部本身实现的方式也是使用数组存放元素,其与ArrayList不同之处在于, Vector对数组的操作是同步的, 其是一个线程安全的集合类.(方法是synchronized)</p></blockquote><p>整体的代码非常简单, 注意这个栈的操作也是线程安全的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Creates an empty Stack.     */</span>    <span class="token keyword">public</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Pushes an item onto the top of this stack. This has exactly     * the same effect as:     * &lt;blockquote>&lt;pre>     * addElement(item)&lt;/pre>&lt;/blockquote>     *     * @param   item   the item to be pushed onto this stack.     * @return  the &lt;code>item&lt;/code> argument.     * @see     java.util.Vector#addElement     */</span>    <span class="token keyword">public</span> E <span class="token function">push</span><span class="token punctuation">(</span>E item<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">addElement</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Removes the object at the top of this stack and returns that     * object as the value of this function.     *     * @return  The object at the top of this stack (the last item     *          of the &lt;tt>Vector&lt;/tt> object).     栈顶是数组的末尾.     * @throws  EmptyStackException  if this stack is empty.     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        E       obj<span class="token punctuation">;</span>        <span class="token keyword">int</span>     len <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj <span class="token operator">=</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">removeElementAt</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Looks at the object at the top of this stack without removing it     * from the stack.     *     * @return  the object at the top of this stack (the last item     *          of the &lt;tt>Vector&lt;/tt> object).     * @throws  EmptyStackException  if this stack is empty.     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span>     len <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EmptyStackException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">elementAt</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Tests if this stack is empty.     *     * @return  &lt;code>true&lt;/code> if and only if this stack contains     *          no items; &lt;code>false&lt;/code> otherwise.     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Returns the 1-based position where an object is on this stack.     * If the object &lt;tt>o&lt;/tt> occurs as an item in this stack, this     * method returns the distance from the top of the stack of the     * occurrence nearest the top of the stack; the topmost item on the     * stack is considered to be at distance &lt;tt>1&lt;/tt>. The &lt;tt>equals&lt;/tt>     * method is used to compare &lt;tt>o&lt;/tt> to the     * items in this stack.     *     * @param   o   the desired object.     * @return  the 1-based position from the top of the stack where     *          the object is located; the return value &lt;code>-1&lt;/code>     *          indicates that the object is not on the stack.     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1224463164541339165L<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现方式2-非线程安全"><a href="#实现方式2-非线程安全" class="headerlink" title="实现方式2 非线程安全"></a>实现方式2 非线程安全</h2><p>我们在上一个文章中详细说明了LinkedList, 其实LinkedList也是可以做为栈使用的.参考一片文章<a href="https://zhuanlan.zhihu.com/p/24752167?refer=dreawer">Java 集合源码剖析</a>, <em>ArrayDeque</em>和<em>LinkedList</em>是<em>Deque</em>的两个通用实现，由于官方更推荐使用<em>AarryDeque</em>用作栈和队列.</p><p>从名字可以看出<em>ArrayDeque</em>底层通过数组实现，为了满足可以同时在数组两端插入或删除元素的需求，该数组还必须是循环的，即<strong>循环数组（circular array）</strong>，也就是说数组的任何一点都可能被看作起点或者终点。<em>ArrayDeque</em>是非线程安全的（not thread-safe），当多个线程同时使用的时候，需要程序员手动同步；另外，该容器不允许放入null元素。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCollection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Deque</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> Serializable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以直接参考一下<a href="https://zhuanlan.zhihu.com/p/24752167?refer=dreawer">Java 集合源码剖析</a>无非就是对数组两端的增删改查, 特殊的在于ArrayDeque实现的是<strong>循环数组</strong>.</p><p>非常经典的一个方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elements<span class="token punctuation">[</span>head <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span>            <span class="token function">doubleCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>head = (head - 1) &amp; (elements.length - 1)</code>, 这一句由于<code>elements.length</code> 始终是2的整数倍, 且是int类型因此</p><pre class="line-numbers language-java"><code class="language-java">elements<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span> 的二进制应该是<span class="token number">0</span> xxxxxxxx <span class="token function">1111</span><span class="token punctuation">(</span>初始化是<span class="token number">16</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span>因此首次head <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">1</span> <span class="token punctuation">(</span><span class="token number">1</span>的反码<span class="token operator">+</span><span class="token number">1</span> 就是<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>因该是<span class="token punctuation">(</span>补码<span class="token punctuation">)</span><span class="token number">111111111111111</span> 与上面的按位与被置为整数<span class="token function">15</span> <span class="token punctuation">(</span>保留低位<span class="token number">4</span>位<span class="token punctuation">)</span>下一次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elements<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>tail <span class="token operator">=</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> head<span class="token punctuation">)</span>            <span class="token function">doubleCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合分析4</title>
      <link href="/2019/10/10/2019-10-10-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%904-2019/"/>
      <url>/2019/10/10/2019-10-10-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%904-2019/</url>
      
        <content type="html"><![CDATA[<p>主要是一些习题吧, 队列也是比较简单的数据结构, 主要体现在应用上.</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><ol><li><p><a href="https://github.com/hefuduo/algorithm/blob/master/kotlinimpl/src/main/kotlin/kotlinimpl/chapter3.kt">数据结构与算法课后习题</a></p></li><li><p>单链表的反转 </p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> r<span class="token operator">:</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>item<span class="token punctuation">)</span>        r <span class="token operator">=</span> r<span class="token punctuation">.</span>next    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">fun</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">revserSingleOriententList</span><span class="token punctuation">(</span>head<span class="token operator">:</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newHead <span class="token operator">=</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> cur <span class="token operator">=</span> head    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead        newHead <span class="token operator">=</span> cur        cur <span class="token operator">=</span> temp    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    newHead<span class="token punctuation">.</span><span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> head<span class="token operator">:</span> Node<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> head    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">9</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        x<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token operator">?</span><span class="token punctuation">.</span>next    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">revserSingleOriententList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断链表是否带环；若带环，求环的长度和入口点</p><ol><li><p><strong>实现思路：</strong>设置两个快慢指针分别指向链表的头节点，快指针一次走两步，慢指针一次走一步，如果两个相遇了，则单链表带环，如果快指针走到NULL节点，则链表不带环；</p></li><li><p><strong>实现思路：</strong>在判断单链表是否带环的问题中，我们找到了单环单链表的相遇结点，用于个指针从单链表的相遇结点开始走，并且设置一个计数器，每走一步，计数器加一，直到该指针再次遇到相遇点，则返回计数器的数；</p></li></ol></li><li><p>遍历一次，找到中间节点; 快慢指针, 快的是慢的两倍.</p></li><li><p>遍历一次，找到倒数第 k 个结点（k从1开始）原理同上.</p><ol><li>先让快指针走k-1步,然后两个指针一起走,直到快指针指向null了,此时慢指针指向倒数第k个节点.</li></ol></li><li><p>遍历一次，删除倒数第 k 个结点（k从1开始），不能用替换删除法</p><ol><li>找到倒数第k-1个节点, 即k的前一个节点, 让next节点指向k个节点的next即可</li></ol></li><li><p>约瑟夫环 已经解决</p></li><li><p>单链表冒泡排序</p><ol><li><p>找到单链表尾部, 尾部向前移动, 尾部始终是排好序的.</p><p>实现</p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//单链表的冒泡排序</span><span class="token keyword">fun</span> <span class="token operator">&lt;</span>E<span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>head<span class="token operator">:</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">?</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> pHead <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">var</span> tail<span class="token operator">:</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> pHead    <span class="token keyword">var</span> p<span class="token operator">:</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> pHead    <span class="token keyword">var</span> prev<span class="token operator">:</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> p    <span class="token keyword">while</span> <span class="token punctuation">(</span>tail<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next    <span class="token keyword">while</span> <span class="token punctuation">(</span>tail <span class="token operator">!=</span> pHead<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> tail<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">?</span><span class="token punctuation">.</span>item <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>item <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>item<span class="token operator">!!</span> <span class="token operator">></span> p<span class="token punctuation">.</span>next<span class="token operator">!!</span><span class="token punctuation">.</span>item<span class="token operator">!!</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">val</span> temp <span class="token operator">=</span> p<span class="token punctuation">.</span>item                    p<span class="token punctuation">.</span>item <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token operator">!!</span><span class="token punctuation">.</span>item                    p<span class="token punctuation">.</span>next<span class="token operator">!!</span><span class="token punctuation">.</span>item <span class="token operator">=</span> temp                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                prev <span class="token operator">=</span> p                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> prev        p <span class="token operator">=</span> pHead    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>合并两个有序链表 同交集并集</p></li><li><p>判断两个链表是否相交;相交则求交点(链表不带环)</p></li><li><p>先判断有无环, 如果一个有一个没有,则肯定不会相交</p></li><li><p>如果两个链表都没有环, 那么两个链表的尾结点肯定是交点</p></li><li><p>如果两个链表都有环 如果两个链表h1,h2都有环，则可以找到两个链表上并且在环上的任何一个结点p1和p2。如果从结点p1开始遍历链表h1，能够遍历到p2，说明两个链表相交；否则从p1开始遍历h1，遍历一圈后又回到p1，而未遍历到p2，说明两个链表不相交。</p></li><li><p>链表的交集, 并集等.</p></li></ol><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><h2 id="队列在并发里的应用"><a href="#队列在并发里的应用" class="headerlink" title="队列在并发里的应用"></a>队列在并发里的应用</h2><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mvn命令将jar/aar添加到本地仓库</title>
      <link href="/2019/09/26/2019-09-18-mvn%E7%94%9F%E6%88%90aar%E7%9A%84pom%E6%96%87%E4%BB%B6-2019/"/>
      <url>/2019/09/26/2019-09-18-mvn%E7%94%9F%E6%88%90aar%E7%9A%84pom%E6%96%87%E4%BB%B6-2019/</url>
      
        <content type="html"><![CDATA[<p>背景:</p><p>​    某些情况下需要使用第三方的sdk, 但是第三方sdk大部分是将jar/aar文件离线提供的, 不方便公司内部各个APP 集成, 需要将aar上传到公司的maven仓库中, 可以使用mvn命令手动生成aar/jar文件的xml格式的pom文件.</p><p>使用如下</p><p>在${user}/.m2/repository目录下执行如下命令</p><pre class="line-numbers language-shell"><code class="language-shell">mvn install:install-file #parameters-Dfile=<your aar/jar file path> -DgroupId=<groupId> # com.xxx.xxx-DartifactId=<artifactId> #project id-Dpackaging=<package format> # aar / jar -DgeneratePom=<false or true> #genegerate pom file or not-Dversion=<x.y.z> #versioncode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>活学活用, 现学现用, 后面记录.</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合分析1</title>
      <link href="/2019/09/26/2019-09-26-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%901-2019/"/>
      <url>/2019/09/26/2019-09-26-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%901-2019/</url>
      
        <content type="html"><![CDATA[<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><p>先用一张图概览一下Java的集合框架</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1569498165722&di=89ac61c0e962f187f1660c5be5a76370&imgtype=0&src=http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/png/20180201100829255445.png"></p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合分析2</title>
      <link href="/2019/09/26/2019-09-26-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%902-2019/"/>
      <url>/2019/09/26/2019-09-26-Java%E9%9B%86%E5%90%88%E5%88%86%E6%9E%902-2019/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>ArrayList实现了List的接口, 是一个顺序存储的容器, 允许放入<code>null</code>元素,底层通过<em>数组实现</em>, 线程非安全.ArrayList有一个capacity表示容量, 如果在向容器中添加元素且容量不足的时候, 容器会自增大底层数组的大小.</p><span id="more"></span><h3 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h3><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//默认的初始化容量</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空表实例的默认元素</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空实例的默认大小空数组. 和上面的EMPTY_ELEMENTDATA甲乙区分是为了当添加第一个元素的时扩容多大.</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储表对象的数组</span><span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表的大小</span><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token comment" spellcheck="true">//最大容量</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法分析"><a href="#方法分析" class="headerlink" title="方法分析"></a>方法分析</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造函数1</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//将内部的数组初始化空数组.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造函数2</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//以initialCapacity初始化数组大小</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果传参为0 则初始化一个空数组</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 非法草书抛出异常.</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造函数3</span><span class="token comment" spellcheck="true">//直接使用一个集合初始化一个ArrayList.</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// replace with empty array.</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h5><h6 id="扩容相关函数"><a href="#扩容相关函数" class="headerlink" title="扩容相关函数"></a>扩容相关函数</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 增大容量来容纳指定数量的元素</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//新的数组长度是旧数组长度的1.5倍</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果新的数组长度小于传入参数的最小容量,那么以最小容量为新的数组大小</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果新的数组容量大于了最大数组大小.</span>      <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>      <span class="token comment" spellcheck="true">//拷贝数组. 最终调用的是System.arrayCopy</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//大容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//if 大于最大容量 = Integer.MAX_VALUE</span>      <span class="token comment" spellcheck="true">//else 等于最大的数组大小.</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>            Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>            MAX_ARRAY_SIZE<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//如果ElementData恒等于默认的空数组.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 取最大的值作为容量.</span>            minCapacity <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//扩容. </span>        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更改++</span>                        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//如果需求组的容量大于数组的长度, 那么要扩容.</span>            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="增"><a href="#增" class="headerlink" title="增"></a>增</h6><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//直接增加.</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//检查容量及扩容</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>      <span class="token comment" spellcheck="true">//提那家元素</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//添加成功返回true</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入</span><span class="token comment" spellcheck="true">//检查范围</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//检查范围 </span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//检查容量</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        <span class="token comment" spellcheck="true">//拷贝移动数组</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向目标位置插入元素</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//size自增</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将一个集合直接添加到ArrayList</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//转为数组</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//集合的长度</span>        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 检查容量</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount</span>      <span class="token comment" spellcheck="true">//拷贝</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//size增加numNew</span>        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>        <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向指定位置直接插入集合</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 检查范围</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//移动数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> numNew<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>        <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定位置索引</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接索引第一个可以找到的对象</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//直接清除</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//大量的数据并且频繁操作可能引发频繁GC</span>        <span class="token comment" spellcheck="true">// clear to let GC do its work</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//删除指定位置元素</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//范围检查</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作数自增</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 保存这个被删除的元素 后续会返回</span>        E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  要移动的元素个数</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//移动元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//尾部的元素置null</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span><span class="token comment" spellcheck="true">//将被删除的元素返回</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除第一个能找到的指定元素</span><span class="token comment" spellcheck="true">//快速移除, 不检查边界, 并且不返回被移除的对象.</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//修改计数+1;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//计算要移动的数量.</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//末尾元素释放.</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果指定的恒等于null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//找到这个null元素</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//快速移动</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//找到这个非null元素, 并移除</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span><span class="token function">removeRange</span><span class="token punctuation">(</span>parentOffset <span class="token operator">+</span> fromIndex<span class="token punctuation">,</span>                               parentOffset <span class="token operator">+</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> parent<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">-=</span> toIndex <span class="token operator">-</span> fromIndex<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//AbstractList</span><span class="token comment" spellcheck="true">/*Overriding this method to take advantage of     * the internals of the list implementation can &lt;i>substantially&lt;/i>     * improve the performance of the &amp;#123;@code clear&amp;#125; operation on this list     * and its subLists.     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> it <span class="token operator">=</span> <span class="token function">listIterator</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">=</span>toIndex<span class="token operator">-</span>fromIndex<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//implementation improve the performance</span><span class="token comment" spellcheck="true">//为什么这个方法是protected 可以参考Effective Java一书中所述.</span><span class="token comment" spellcheck="true">//TODO 解释为什么</span><span class="token comment" spellcheck="true">//这个方法是给subList用的</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Android-changed: Throw an IOOBE if toIndex &lt; fromIndex as documented.</span>        <span class="token comment" spellcheck="true">// All the other cases (negative indices, or indices greater than the size</span>        <span class="token comment" spellcheck="true">// will be thrown by System#arrayCopy.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>toIndex <span class="token operator">&lt;</span> fromIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"toIndex &lt; fromIndex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> toIndex<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> toIndex<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span>                         numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// clear to let GC do its work</span>        <span class="token keyword">int</span> newSize <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token punctuation">(</span>toIndex<span class="token operator">-</span>fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> newSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> newSize<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除所有C集合中包括的对象</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//检查非空</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个方法设计的是在太妙了</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">,</span> <span class="token keyword">boolean</span> complement<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> modified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> complement<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">//在这里实际上用了个双指针, 将后面的元素移动到被删除的元素上, 这样做的目的是一边删除(占位置)一边移动元素, 效率更高</span>                    elementData<span class="token punctuation">[</span>w<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Preserve behavioral compatibility with AbstractCollection,</span>            <span class="token comment" spellcheck="true">// even if c.contains() throws.</span>          <span class="token comment" spellcheck="true">//这里可能是为了做一些防御</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> r<span class="token punctuation">,</span>                                 elementData<span class="token punctuation">,</span> w<span class="token punctuation">,</span>                                 size <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                w <span class="token operator">+=</span> size <span class="token operator">-</span> r<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// clear to let GC do its work</span>              <span class="token comment" spellcheck="true">//将w后续的元素释放</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//修改操作数</span>                modCount <span class="token operator">+=</span> size <span class="token operator">-</span> w<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//</span>                size <span class="token operator">=</span> w<span class="token punctuation">;</span>                modified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modified<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将不属于C中的元素移除.</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//参考上述的描述, 这里complement = true, 刚好和removeAll相反.</span>      <span class="token comment" spellcheck="true">//这个方法设计的非常巧妙</span>        <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="改"><a href="#改" class="headerlink" title="改"></a>改</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这个没啥说的 非常简单,直接数组赋值就行了,注意不要越界的检查.</span>        <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        E oldValue <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SubList以及迭代器"><a href="#SubList以及迭代器" class="headerlink" title="SubList以及迭代器"></a>SubList以及迭代器</h4><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>先看几个方法</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Returns an iterator over the elements in this list in proper sequence.     *     * &lt;p>The returned iterator is &lt;a href="#fail-fast">&lt;i>fail-fast&lt;/i>&lt;/a>.     *     * @return an iterator over the elements in this list in proper sequence     */</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//返回了Itr实例, 看ArrayList怎么实现的</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**     * An optimized version of AbstractList.Itr     这里说的是一个优化过的AbstractList.Itr     */</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Android-changed: Add "limit" field to detect end of iteration.</span>        <span class="token comment" spellcheck="true">// The "limit" of this iterator. This is the size of the list at the time the</span>        <span class="token comment" spellcheck="true">// iterator was created. Adding &amp; removing elements will invalidate the iteration</span>        <span class="token comment" spellcheck="true">// anyway (and cause next() to throw) so saving this value will guarantee that the</span>        <span class="token comment" spellcheck="true">// value of hasNext() remains stable and won't flap between true and false when elements</span>        <span class="token comment" spellcheck="true">// are added and removed from the list.</span>        <span class="token keyword">protected</span> <span class="token keyword">int</span> limit <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 迭代器的边界</span>        <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// index of next element to return</span>        <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// index of last element returned; -1 if no such</span>        <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cursor <span class="token operator">&lt;</span> limit<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果修改和期望不符, 则抛出多线程修改异常.</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> limit<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//边界检查</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用cursor增加1</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>                limit<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//foreach的实现</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> consumer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> size <span class="token operator">&amp;&amp;</span> modCount <span class="token operator">==</span> expectedModCount<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// update once at end of iteration to reduce heap write traffic</span>            cursor <span class="token operator">=</span> i<span class="token punctuation">;</span>            lastRet <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**     * An optimized version of AbstractList.ListItr          优化过的迭代器, 能够前后移动,是一个双向的迭代器,并且支持增删改查.     */</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListItr</span> <span class="token keyword">extends</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">ListItr</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cursor<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cursor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> E <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>                ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>                limit<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ConcurrentModificationException"><a href="#ConcurrentModificationException" class="headerlink" title="ConcurrentModificationException"></a>ConcurrentModificationException</h5><p>在使用迭代器的时候, 经常会遇见一个问题, 困扰大家很久.</p><p>举个栗子, 我明明没有在多个线程中修改List 为什么还会出现这个问题呢?</p><p>答案是看源码, 最好写一个demo主动报错debug就知道了</p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> mList <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>forEach &amp;#<span class="token number">123</span><span class="token punctuation">;</span> i <span class="token operator">-></span>        mList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>     &amp;#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//modCount = 10 对list做了10次add操作</span>    <span class="token keyword">val</span> itr <span class="token operator">=</span> mList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// modCount = expectedModCount = 10</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/**              public E next() &amp;#123;            checkForComodification();            int i = cursor;            if (i >= size)                throw new NoSuchElementException();            Object[] elementData = ArrayList.this.elementData;            if (i >= elementData.length)                throw new ConcurrentModificationException();            cursor = i + 1;            return (E) elementData[lastRet = i];        &amp;#125;                //这里会检查modeCount != expectedModCount                final void checkForComodification() &amp;#123;            if (modCount != expectedModCount)                throw new ConcurrentModificationException();        &amp;#125;      */</span>        <span class="token keyword">val</span> value <span class="token operator">=</span> itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//   </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>            mList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//此时modeCount = 11</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者使用foreach也可以, foreach的底层实现就是iterator</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的代码就会报错.</p><p>分析原因可以参考注释.</p><p>主要原因就是在修改ArrayList的时候, 直接使用了<code>ArrayList#remove</code>这种操作, 使得<code>modCount</code>和<code>expectedModCount</code>不再相等, 解决方法就是如果使用迭代器遍历List, 那么在需要修改arrayList的时候, 也使用迭代器, 保证上述两个值始终相等.如下:</p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> mList <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>forEach &amp;#<span class="token number">123</span><span class="token punctuation">;</span> i <span class="token operator">-></span>        mList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> itr <span class="token operator">=</span> mList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> value <span class="token operator">=</span> itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>            itr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>mList<span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="SubList"><a href="#SubList" class="headerlink" title="SubList"></a>SubList</h5><p>子串就代表的是ArrayList的子List, 上代码.</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">SubList</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RandomAccess</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> AbstractList<span class="token operator">&lt;</span>E<span class="token operator">></span> parent<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//父List</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> parentOffset<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 相对父List的偏移</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> offset<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//偏移</span>        <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 大小</span>        <span class="token function">SubList</span><span class="token punctuation">(</span>AbstractList<span class="token operator">&lt;</span>E<span class="token operator">></span> parent<span class="token punctuation">,</span>                <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parentOffset <span class="token operator">=</span> fromIndex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> offset <span class="token operator">+</span> fromIndex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> toIndex <span class="token operator">-</span> fromIndex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//同ArrayList, 修改的是父List</span>        <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            E oldValue <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">elementData</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">[</span>offset <span class="token operator">+</span> index<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//同上</span>        <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">elementData</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parentOffset <span class="token operator">+</span> index<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> parent<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            E result <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>parentOffset <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> parent<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span><span class="token function">removeRange</span><span class="token punctuation">(</span>parentOffset <span class="token operator">+</span> fromIndex<span class="token punctuation">,</span>                               parentOffset <span class="token operator">+</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> parent<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">-=</span> toIndex <span class="token operator">-</span> fromIndex<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cSize <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>parentOffset <span class="token operator">+</span> index<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">=</span> parent<span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">+=</span> cSize<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListIterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> cursor <span class="token operator">=</span> index<span class="token punctuation">;</span>                <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> cursor <span class="token operator">!=</span> SubList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> SubList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token punctuation">(</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> cursor <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token keyword">public</span> E <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> cursor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cursor <span class="token operator">=</span> i<span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token punctuation">(</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> consumer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> SubList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> size <span class="token operator">&amp;&amp;</span> modCount <span class="token operator">==</span> expectedModCount<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// update once at end of iteration to reduce heap write traffic</span>                    lastRet <span class="token operator">=</span> cursor <span class="token operator">=</span> i<span class="token punctuation">;</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> cursor<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> cursor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        SubList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                        cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>                        lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        expectedModCount <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> lastRet<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>                        SubList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                        lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        expectedModCount <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedModCount <span class="token operator">!=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">subListRangeCheck</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SubList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> String <span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"Index: "</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">", Size: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> Spliterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayListSpliterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span>                                               offset <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>链表 ,使用引用(指针)将各个节点串联起来的一种数据结构, 在内存中的存储地址是非连续的.</p><p>先看一下LinkedList实现了哪些接口.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>  E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//retrieves and remove the head of this queue</span>  E <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// retrieves the head but not remove, throw exception if queue is empty</span>  E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// retrieves the head but not remove. not throw exception.</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Deque</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//,,,,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractSequentialList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractSequentialList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Deque<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        E item<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储的元素</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//前向</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后向</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员变量-1"><a href="#成员变量-1" class="headerlink" title="成员变量"></a>成员变量</h3><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//size 在序列化时不进行序列化</span>    <span class="token comment" spellcheck="true">/**     * Pointer to first node.     * Invariant: (first == null &amp;&amp; last == null) ||     *            (first.prev == null &amp;&amp; first.item != null)     */</span>  <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一个节点</span>    <span class="token comment" spellcheck="true">/**     * Pointer to last node.     * Invariant: (first == null &amp;&amp; last == null) ||     *            (last.next == null &amp;&amp; last.item != null)     */</span>  <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最后一个节点.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Constructs an empty list.     */</span>    <span class="token keyword">public</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Constructs a list containing the elements of the specified     * collection, in the order they are returned by the collection's     * iterator.     *     * @param  c the collection whose elements are to be placed into this list     * @throws NullPointerException if the specified collection is null     */</span>    <span class="token keyword">public</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法分析-1"><a href="#方法分析-1" class="headerlink" title="方法分析"></a>方法分析</h3><h4 id="增删改查-1"><a href="#增删改查-1" class="headerlink" title="增删改查"></a>增删改查</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Links e as first element.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 将指定的元素插入到list的开头.  </span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">linkFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Links e as last element.     */</span>    <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Appends the specified element to the end of this list.     *     * &lt;p>This method is equivalent to &amp;#123;@link #add&amp;#125;.     *     * @param e the element to add     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Appends the specified element to the end of this list.     *     * &lt;p>This method is equivalent to &amp;#123;@link #addLast&amp;#125;.     *     * @param e element to be appended to this list     * @return &amp;#123;@code true&amp;#125; (as specified by &amp;#123;@link Collection#add&amp;#125;)     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">addAll</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//位置检查</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//将C转换为array</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//a的长度</span>        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numNew <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//两个node</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pred<span class="token punctuation">,</span> succ<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果刚好是到尾部, 将pred指向last</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            succ <span class="token operator">=</span> null<span class="token punctuation">;</span>            pred <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//否则在指定的index处插入.</span>            succ <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将元素逐个插入到list中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span> E e <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> o<span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span>                first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">else</span>                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            pred <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果succ是null则, last=pred (last指向最后一个非空元素)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>succ <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            last <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果succ不为空, 那么将pred和succ连接起来.</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> succ<span class="token punctuation">;</span>            succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//size增加number</span>        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//modCount自增.</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//位置检查.</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**     * Tells if the argument is the index of a valid position for an     * iterator or an add operation.     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//移除首个元素并返回</span>        <span class="token keyword">public</span> E <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//注意first == null会抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//详细方法</span>        <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Unlinks non-null first node f.     * 整个函数将移除头部, 并将头部指向头部的下一个元素.     */</span>    <span class="token keyword">private</span> E <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// assert f == first &amp;&amp; f != null;</span>        <span class="token keyword">final</span> E element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>            last <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Removes and returns the last element from this list.     *     * @return the last element from this list     * @throws NoSuchElementException if this list is empty     */</span>    <span class="token comment" spellcheck="true">//移除末尾元素</span>    <span class="token keyword">public</span> E <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//注意last == null会抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//详细方法</span>        <span class="token keyword">return</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Unlinks non-null last node l.     */</span>    <span class="token keyword">private</span> E <span class="token function">unlinkLast</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// assert l == last &amp;&amp; l != null;</span>        <span class="token keyword">final</span> E element <span class="token operator">=</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev <span class="token operator">=</span> l<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        l<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        l<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 移除函数.*/</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Unlinks non-null node x.     */</span>            E <span class="token function">unlink</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// assert x != null;</span>        <span class="token keyword">final</span> E element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前向节点</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 后向节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//边界</span>            first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//边界</span>            last <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 释放元素</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// size自减</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//修改计数自增</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检查index是否在边界之内, 否则抛出数组越界异常.</span>        <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://s2.ax1x.com/2019/10/10/uTZFKO.jpg" alt="WechatIMG23" style="zoom:40%;" /><h5 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h5><p>改就一个接口, 直接将制定的index上的元素置为指定的元素</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Replaces the element at the specified position in this list with the     * specified element.     *     * @param index index of the element to replace     * @param element element to be stored at the specified position     * @return the element previously at the specified position     * @throws IndexOutOfBoundsException &amp;#123;@inheritDoc&amp;#125;     */</span>    <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        E oldVal <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Returns the element at the specified position in this list.     *     * @param index index of the element to return     * @return the element at the specified position in this list     * @throws IndexOutOfBoundsException &amp;#123;@inheritDoc&amp;#125;     */</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意这里返回是非空的</span>    <span class="token comment" spellcheck="true">/**     * Returns the (non-null) Node at the specified element index.     */</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// assert isElementIndex(index);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Returns &amp;#123;@code true&amp;#125; if this list contains the specified element.     * More formally, returns &amp;#123;@code true&amp;#125; if and only if this list contains     * at least one element &amp;#123;@code e&amp;#125; such that     * &lt;tt>(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt>.     *     * @param o element whose presence in this list is to be tested     * @return &amp;#123;@code true&amp;#125; if this list contains the specified element     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引指定对象o</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果o是空的, 找到第一个null元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//否则找到和o相等的元素,并返回index.</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="一些其他特殊操作"><a href="#一些其他特殊操作" class="headerlink" title="一些其他特殊操作"></a>一些其他特殊操作</h5><p>peek 返回链表头但不删除</p><p>poll 返回链表且删除元素</p><p>offer 将指定元素添加到链表末尾</p><p>每个方法都有xxFirst xxLast</p><p>此外, 还有类似栈的操作</p><p>push添加到表头(入栈)</p><p>pop 将表头元素移除(出栈)</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Universal-ImageLoader源代码分析2</title>
      <link href="/2019/04/18/2019-03-20-UniversalImageLoader%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902-2019/"/>
      <url>/2019/04/18/2019-03-20-UniversalImageLoader%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902-2019/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="包结构与架构"><a href="#包结构与架构" class="headerlink" title="包结构与架构"></a>包结构与架构</h2><p>包的结构与说明</p><pre><code>universalimageloader|     |-cache        |-disc        |-memory    |-core        |-assist        |-decode        |-display        |-download        |-imageaware        |-listener        |-process    |-utils</code></pre><h2 id="整体设计架构与说明"><a href="#整体设计架构与说明" class="headerlink" title="整体设计架构与说明"></a>整体设计架构与说明</h2><h3 id="结构图表示"><a href="#结构图表示" class="headerlink" title="结构图表示"></a>结构图表示</h3><p><img src="/img/uil/UIL.png" alt="UIL"></p><h3 id="各模块的说明"><a href="#各模块的说明" class="headerlink" title="各模块的说明"></a>各模块的说明</h3><p>整个库一级划分为<code>cache</code>, <code>core</code> , <code>util</code> 三个大模块.</p><ol><li><p><code>core</code>: 核心模块分为<code>decode(解码)</code>, <code>display(展示)</code>,<code>download(下载)</code>, <code>imageAware(显示图片的包装)</code>,<code>process(处理图片)</code> 五个重要的模块.此外,尤其要注意</p><p><code>ImageLoaderEngine</code>, <code>ImageDecorder</code>, <code>BitmapDisplayer</code>, <code>BitmapProcessor</code>,  <code>ImageDownloader</code>, <code>ImageAware</code> 这几个重要的类.</p></li><li><p><code>cache</code>: 缓存模块分为<code>disc</code>缓存和<code>memory</code>缓存两个模块</p></li><li><p><code>utils</code>:工具类模块, 如缓存工具类|Log|图像处理等. </p></li></ol><h2 id="加载图片流程"><a href="#加载图片流程" class="headerlink" title="加载图片流程"></a>加载图片流程</h2><h3 id="用一张图简单的标识图片加载流程"><a href="#用一张图简单的标识图片加载流程" class="headerlink" title="用一张图简单的标识图片加载流程"></a>用一张图简单的标识图片加载流程</h3><p><img src="https://raw.githubusercontent.com/nostra13/Android-Universal-Image-Loader/master/wiki/UIL_Flow.png"></p><h3 id="加载流程图"><a href="#加载流程图" class="headerlink" title="加载流程图"></a>加载流程图</h3><p><img src="/img/uil/UIL%E6%B5%81%E7%A8%8B%E5%9B%BE1.png" alt="UIL流程图1"></p><h3 id="详细执行流程"><a href="#详细执行流程" class="headerlink" title="详细执行流程"></a>详细执行流程</h3><h4 id="加载的时序图"><a href="#加载的时序图" class="headerlink" title="加载的时序图"></a>加载的时序图</h4><p><code>loadImage</code>本质也是调用<code>displayImage</code>因此直接看<code>displayImage</code>的执行流程即可.</p><p><code>ImageLoader.getInstance().displayImage(uri, imageview, options, listener);</code></p><p><img src="/img/uil/UIL%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="UIL时序图"></p><p>有缓存的时候, 先去检查缓存.参考流程图</p><h4 id="DisplayTask-的详细执行流程图"><a href="#DisplayTask-的详细执行流程图" class="headerlink" title="DisplayTask 的详细执行流程图"></a>DisplayTask 的详细执行流程图</h4><blockquote><p>参考<code>LoadAndDisplayimageTask</code>中的<code>run</code>方法</p></blockquote><p><img src="/img/uil/LoadAndDisplayImageTask.png" alt="LoadAndDisplayImageTask"></p><h3 id="TODO-UML"><a href="#TODO-UML" class="headerlink" title="//TODO UML"></a>//TODO UML</h3><h2 id="缓存算法详解"><a href="#缓存算法详解" class="headerlink" title="缓存算法详解"></a>缓存算法详解</h2><h3 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h3><p>缓存算法从缓存位置上划分为两种, <code>memory</code>和<code>disc</code>.</p><pre><code>|-cache    |-disc        |-impl(具体实现)        |-naming(文件命名工具)        |-DiskCache:interface(对外接口)    |-memory        |-impl(具体实现)        |-BaseMemoryCache        |-LimitedMemoryCache        |-MemoryCache:interface(对外接口)</code></pre><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><h4 id="内存缓存"><a href="#内存缓存" class="headerlink" title="内存缓存"></a>内存缓存</h4><p><img src="/img/uil/memocache.png" alt="memocache"></p><h4 id="磁盘缓存"><a href="#磁盘缓存" class="headerlink" title="磁盘缓存"></a>磁盘缓存</h4><h2 id="解码器与下载器"><a href="#解码器与下载器" class="headerlink" title="解码器与下载器"></a>解码器与下载器</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//BaseImageDownloader</span><span class="token comment" spellcheck="true">//根据URI的类型, 获取不同的InputStream</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> InputStream <span class="token function">getStream</span><span class="token punctuation">(</span>String imageUri<span class="token punctuation">,</span> Object extra<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>Scheme<span class="token punctuation">.</span><span class="token function">ofUri</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> HTTP<span class="token operator">:</span>            <span class="token keyword">case</span> HTTPS<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">getStreamFromNetwork</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span> extra<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FILE<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">getStreamFromFile</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span> extra<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> CONTENT<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">getStreamFromContent</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span> extra<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ASSETS<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">getStreamFromAssets</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span> extra<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> DRAWABLE<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">getStreamFromDrawable</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span> extra<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> UNKNOWN<span class="token operator">:</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">getStreamFromOtherSource</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span> extra<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//BaseImageDecoders</span><span class="token comment" spellcheck="true">//将inputStream解码为Bitmap类型</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Bitmap <span class="token function">decode</span><span class="token punctuation">(</span>ImageDecodingInfo decodingInfo<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Bitmap decodedBitmap<span class="token punctuation">;</span>        ImageFileInfo imageInfo<span class="token punctuation">;</span>        InputStream imageStream <span class="token operator">=</span> <span class="token function">getImageStream</span><span class="token punctuation">(</span>decodingInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>imageStream <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            L<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>ERROR_NO_IMAGE_STREAM<span class="token punctuation">,</span> decodingInfo<span class="token punctuation">.</span><span class="token function">getImageKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            imageInfo <span class="token operator">=</span> <span class="token function">defineImageSizeAndRotation</span><span class="token punctuation">(</span>imageStream<span class="token punctuation">,</span> decodingInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            imageStream <span class="token operator">=</span> <span class="token function">resetStream</span><span class="token punctuation">(</span>imageStream<span class="token punctuation">,</span> decodingInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            Options decodingOptions <span class="token operator">=</span> <span class="token function">prepareDecodingOptions</span><span class="token punctuation">(</span>imageInfo<span class="token punctuation">.</span>imageSize<span class="token punctuation">,</span> decodingInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            decodedBitmap <span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>imageStream<span class="token punctuation">,</span> null<span class="token punctuation">,</span> decodingOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            IoUtils<span class="token punctuation">.</span><span class="token function">closeSilently</span><span class="token punctuation">(</span>imageStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>decodedBitmap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            L<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>ERROR_CANT_DECODE_IMAGE<span class="token punctuation">,</span> decodingInfo<span class="token punctuation">.</span><span class="token function">getImageKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            decodedBitmap <span class="token operator">=</span> <span class="token function">considerExactScaleAndOrientatiton</span><span class="token punctuation">(</span>decodedBitmap<span class="token punctuation">,</span> decodingInfo<span class="token punctuation">,</span> imageInfo<span class="token punctuation">.</span>exif<span class="token punctuation">.</span>rotation<span class="token punctuation">,</span>                    imageInfo<span class="token punctuation">.</span>exif<span class="token punctuation">.</span>flipHorizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> decodedBitmap<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
            <tag> open source library </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 图片库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Universal-ImageLoader源代码分析1</title>
      <link href="/2019/03/20/2019-03-20-UniversalImageLoader%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901-2019/"/>
      <url>/2019/03/20/2019-03-20-UniversalImageLoader%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901-2019/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><h2 id="AUIL-的特点"><a href="#AUIL-的特点" class="headerlink" title="AUIL 的特点"></a>AUIL 的特点</h2><ul><li>多线程下载图片(同步异步)</li><li>提供多种ImageLoader的用户配置(thread executors, downloaders,decoder, memory and disk cache, display image options, etc.)</li><li>为每一个显示图片的调用提供了非常丰富的配置(stub image, caching switch, decoding options, Bitmap processing and displaying, etc)</li><li>提供图片的内存和文件缓存</li><li>图片加载的监听和下载进度的监听</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="QuickSetup"><a href="#QuickSetup" class="headerlink" title="QuickSetup"></a>QuickSetup</h3><ol><li><p>include library</p><pre class="line-numbers language-groovy"><code class="language-groovy">implementation <span class="token string">'com.nostra13.universalimageloader:universal-image-loader:1.9.5'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>config manifest permission</p><pre class="line-numbers language-xml"><code class="language-xml">manifest>    <span class="token comment" spellcheck="true">&lt;!-- Include following permission if you load images from Internet --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Include following permission if you want to cache images on SD card --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.WRITE_EXTERNAL_STORAGE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>config imageloader and initial </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Create global configuration and initialize ImageLoader with this config</span>        ImageLoaderConfiguration config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageLoaderConfiguration<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ImageLoader<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Display Options</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DON'T COPY THIS CODE TO YOUR PROJECT! This is just example of ALL options using.</span><span class="token comment" spellcheck="true">// See the sample project how to use ImageLoader correctly.</span>DisplayImageOptions options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DisplayImageOptions<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">showImageOnLoading</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_stub<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// resource or drawable</span>        <span class="token punctuation">.</span><span class="token function">showImageForEmptyUri</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_empty<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// resource or drawable</span>        <span class="token punctuation">.</span><span class="token function">showImageOnFail</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// resource or drawable</span>        <span class="token punctuation">.</span><span class="token function">resetViewBeforeLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// default</span>        <span class="token punctuation">.</span><span class="token function">delayBeforeLoading</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">cacheInMemory</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// default</span>        <span class="token punctuation">.</span><span class="token function">cacheOnDisk</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// default</span>        <span class="token punctuation">.</span><span class="token function">preProcessor</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">postProcessor</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">extraForDownloader</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">considerExifParams</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// default</span>        <span class="token punctuation">.</span><span class="token function">imageScaleType</span><span class="token punctuation">(</span>ImageScaleType<span class="token punctuation">.</span>IN_SAMPLE_POWER_OF_2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// default</span>        <span class="token punctuation">.</span><span class="token function">bitmapConfig</span><span class="token punctuation">(</span>Bitmap<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>ARGB_8888<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// default</span>        <span class="token punctuation">.</span><span class="token function">decodingOptions</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">displayer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleBitmapDisplayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// default</span>        <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// default</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="可接受的的URI资源示例"><a href="#可接受的的URI资源示例" class="headerlink" title="可接受的的URI资源示例"></a>可接受的的URI资源示例</h4><pre><code>&quot;http://site.com/image.png&quot; // from Web&quot;file:///mnt/sdcard/image.png&quot; // from SD card&quot;file:///mnt/sdcard/video.mp4&quot; // from SD card (video thumbnail)&quot;content://media/external/images/media/13&quot; // from content provider&quot;content://media/external/video/media/13&quot; // from content provider (video thumbnail)&quot;assets://image.png&quot; // from assets&quot;drawable://&quot; + R.drawable.img // from drawables (non-9patch images)</code></pre><p><strong>NOTE:</strong> Use <code>drawable://</code> only if you really need it! Always <strong>consider the native way</strong> to load drawables - <code>ImageView.setImageResource(...)</code> instead of using of <code>ImageLoader</code>.</p><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Load image, decode it to Bitmap and display Bitmap in ImageView (or any other view </span><span class="token comment" spellcheck="true">//    which implements ImageAware interface)</span>ImageLoader imageLoader <span class="token operator">=</span> ImageLoader<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>imageLoader<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span> imageview<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Load image, decode it to Bitmap and return Bitmap to callback</span>imageLoader<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleImageLoadingListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadingComplete</span><span class="token punctuation">(</span>String imageUri<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> Bitmap loadedImage<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Do whatever you want with Bitmap</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Load image, decode it to Bitmap and return Bitmap synchronously</span>Bitmap bmp <span class="token operator">=</span> imageLoader<span class="token punctuation">.</span><span class="token function">loadImageSync</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="完全使用"><a href="#完全使用" class="headerlink" title="完全使用"></a>完全使用</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Load image, decode it to Bitmap and display Bitmap in ImageView (or any other view </span><span class="token comment" spellcheck="true">//    which implements ImageAware interface)</span>imageLoader<span class="token punctuation">.</span><span class="token function">displayImage</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span> imageView<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ImageLoadingListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadingStarted</span><span class="token punctuation">(</span>String imageUri<span class="token punctuation">,</span> View view<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadingFailed</span><span class="token punctuation">(</span>String imageUri<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> FailReason failReason<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadingComplete</span><span class="token punctuation">(</span>String imageUri<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> Bitmap loadedImage<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadingCancelled</span><span class="token punctuation">(</span>String imageUri<span class="token punctuation">,</span> View view<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ImageLoadingProgressListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onProgressUpdate</span><span class="token punctuation">(</span>String imageUri<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> <span class="token keyword">int</span> current<span class="token punctuation">,</span> <span class="token keyword">int</span> total<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Load image, decode it to Bitmap and return Bitmap to callback</span>ImageSize targetSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageSize</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// result Bitmap will be fit to this size</span>imageLoader<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span> targetSize<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleImageLoadingListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadingComplete</span><span class="token punctuation">(</span>String imageUri<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> Bitmap loadedImage<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Do whatever you want with Bitmap</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Load image, decode it to Bitmap and return Bitmap synchronously</span>ImageSize targetSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageSize</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// result Bitmap will be fit to this size</span>Bitmap bmp <span class="token operator">=</span> imageLoader<span class="token punctuation">.</span><span class="token function">loadImageSync</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span> targetSize<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Load-amp-Display-Task-Flow"><a href="#Load-amp-Display-Task-Flow" class="headerlink" title="Load &amp; Display Task Flow"></a>Load &amp; Display Task Flow</h4><p>重要, 这个是AUIL的加载图片流程</p><p><img src="https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/wiki/UIL_Flow.png" alt="AUIL"></p><h2 id="用户须知"><a href="#用户须知" class="headerlink" title="用户须知"></a>用户须知</h2><ol><li><p><strong>Caching is NOT enabled by default</strong>如果需要开启内存或者是磁盘缓存,需要配置<code>DisplayImageOptions</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Create default options which will be used for every </span><span class="token comment" spellcheck="true">//  displayImage(...) call if no options will be passed to this method</span>DisplayImageOptions defaultOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DisplayImageOptions<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           <span class="token punctuation">.</span><span class="token function">cacheInMemory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">cacheOnDisk</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ImageLoaderConfiguration config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageLoaderConfiguration<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           <span class="token punctuation">.</span><span class="token function">defaultDisplayImageOptions</span><span class="token punctuation">(</span>defaultOptions<span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ImageLoader<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Do it on Application start</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>// Then later, when you want to display imageImageLoader.getInstance().displayImage(imageUrl, imageView); // Default options will be used</code></pre><p>或者这样:</p><pre><code>DisplayImageOptions options = new DisplayImageOptions.Builder()           ...           .cacheInMemory(true)           .cacheOnDisk(true)           ...           .build();ImageLoader.getInstance().displayImage(imageUrl, imageView, options); // Incoming options will be used</code></pre></li><li><p>注意<code>WRITE_EXTERNAL_STORAGE</code>这个权限的申请.</p></li><li><p>如果发生OOM可以尝试关掉内存缓存, 或减少线程池的大小, 或使用RGB-565的图像配置替换ARGB-8888, 或者裁剪图片显示小图.</p></li><li><p>MemoryChache的配置</p><ol><li>强引用 <code>LruMemoryCache</code></li><li>强弱引用混用 1,3除外的算法.</li><li>只是用弱引用 <code>WeakMemoryCache</code></li></ol></li><li><p><code>DiscChache</code>也是可配置的<code>UnlimitedDiscCache</code> 是最快的,但是占用存储空间</p></li><li><p>使用<code>RoundedBigmaDisplayer</code>或<code>FadeInbitmapDisplayer</code> 装饰图片加载</p></li><li><p>为了是<code>ListView</code> or <code>GrideView</code>的性能提升, 使用<code>PauseOnScrollListener</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> pauseOnScroll <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// or true</span><span class="token keyword">boolean</span> pauseOnFling <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// or false</span>PauseOnScrollListener listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PauseOnScrollListener</span><span class="token punctuation">(</span>imageLoader<span class="token punctuation">,</span> pauseOnScroll<span class="token punctuation">,</span> pauseOnFling<span class="token punctuation">)</span><span class="token punctuation">;</span>listView<span class="token punctuation">.</span><span class="token function">setOnScrollListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>If you see in logs some strange supplement at the end of image URL (e.g. <a href="http://anysite.com/images/image.png_230x460">http://anysite.com/images/image.png_230x460</a>) then it doesn’t mean this URL is used in requests. This is just “URL + target size”, also this is key for Bitmap in memory cache. This postfix (_230x460) is NOT used in requests.</p></li></ol><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
            <tag> open source library </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 图片库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android JNI 系列</title>
      <link href="/2017/12/27/2017-12-28-AndroidJNI-2017/"/>
      <url>/2017/12/27/2017-12-28-AndroidJNI-2017/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Android-JNI-基本知识"><a href="#Android-JNI-基本知识" class="headerlink" title="Android JNI 基本知识"></a>Android JNI 基本知识</h1><h2 id="1-1-什么是JNI"><a href="#1-1-什么是JNI" class="headerlink" title="1.1 什么是JNI"></a>1.1 什么是JNI</h2><p><code>JNI (Java Native Interface)</code>,它提供了若干<code>API</code>使得<code>Java</code>可以和其他语言互通,是<code>JDK</code>的一部分.</p><p>理解这些就可以了!</p><h2 id="1-2-为什么使用JNI"><a href="#1-2-为什么使用JNI" class="headerlink" title="1.2 为什么使用JNI"></a>1.2 为什么使用JNI</h2><p>使用<code>JNI</code>是为了将现有的<code>C或C++</code>库集成到使用<code>Java</code>语言开发的应用中,或者有些性能要求较高的场景下,使用<code>C</code>或<code>C++</code>才能满足的场景.</p><h2 id="1-3-使用JNI带来的问题"><a href="#1-3-使用JNI带来的问题" class="headerlink" title="1.3 使用JNI带来的问题"></a>1.3 使用JNI带来的问题</h2><p>程序不再跨平台,还有JNI带来的内存问题,以及可能引起的<code>Crash</code></p><h1 id="使用Android-Studio-搭建JNI开发环境"><a href="#使用Android-Studio-搭建JNI开发环境" class="headerlink" title="使用Android Studio 搭建JNI开发环境"></a>使用Android Studio 搭建JNI开发环境</h1><p>目前使用<code>Android Studio 3.0</code>可以直接建立一个支持<code>C或C++</code>语言的<code>JNI</code>项目.</p><p>如果需要将现有的应用集成<code>JNI</code>可参照<code>Google Dev</code>的官方文档操作.</p><p>编译<code>JNI</code>程序,可以使用<code>NDK</code>编译,或者使用<code>CMAKE</code>来编译,现在来讲都可行,推荐使用<code>CMAKE</code>来编译.</p><p>在<code>app</code>目录下建立一个<code>JNI目录</code>源文件都放到这里.</p><p><img src="/img/jni/jni1.png" alt="error"></p><p><img src="/img/jni/jni2.png" alt="jni2"></p><p>注意目录名称是<code>JNI</code>,只是在<code>Android Studio</code>中显示为<code>cpp目录</code></p><p>下面写CMAKE文件</p><pre class="line-numbers language-cmake"><code class="language-cmake"># 这里使用的是bsdiff patch的JNI库例子.# For more information about using CMake with Android Studio, read the# documentation: https://d.android.com/studio/projects/add-native-code.html# Sets the minimum version of CMake required to build the native library.# 设置CMake编译器的版本cmake_minimum_required(VERSION 3.4.1)# Creates and names a library, sets it as either STATIC# or SHARED, and provides the relative paths to its source code.# You can define multiple libraries, and CMake builds them for you.# Gradle automatically packages shared libraries with your APK.# 声明源文件路径file(GLOB bzip "src/main/jni/bzip2/*.c")file(GLOB bs_src "src/main/jni/*.c")# 引入头文件路径 (这里必须要引入)include_directories("src/main/jni/bzip2/")# 引入源文件add_library( # Sets the name of the library.             # 设置编译后的库名称             native-lib             # Sets the library as a shared library.             SHARED             # Provides a relative path to your source file(s).             # 设置源文件的位置             $&#123;bzip&#125;             src/main/jni/native-lib.c )# Searches for a specified prebuilt library and stores the path as a# variable. Because CMake includes system libraries in the search path by# default, you only need to specify the name of the public NDK library# you want to add. CMake verifies that the library exists before# completing its build.find_library( # Sets the name of the path variable.              log-lib              # Specifies the name of the NDK library that              # you want CMake to locate.              # 引入依赖库              log )# Specifies libraries CMake should link to your target library. You# can link multiple libraries, such as libraries you define in this# build script, prebuilt third-party libraries, or system libraries.target_link_libraries( # Specifies the target library.                       native-lib                                               # Links the target library to the log library                       # included in the NDK.                       $&#123;log-lib&#125; )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单的来一个JNI HelloWorld</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"native-lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> String <span class="token function">helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;jni.h></span></span>JNIEXPORT jstring JNICALL<span class="token function">Java_com_sankuai_meituan_testjni_MainActivity_helloworld</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jclass type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从<code>C</code>的函数定义中可以发现,函数的签名是有一定规律的一般是下面这种格式</p><p><code>Java_[包名]_[类名]_[方法名](JNIEnv * env,jclass type,[params])</code></p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android IPC 机制</title>
      <link href="/2017/12/13/2017-12-13-androidIPC-2017/"/>
      <url>/2017/12/13/2017-12-13-androidIPC-2017/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Andorid-IPC"><a href="#Andorid-IPC" class="headerlink" title="Andorid IPC"></a>Andorid IPC</h1><h2 id="Android中的多进程模式"><a href="#Android中的多进程模式" class="headerlink" title="Android中的多进程模式"></a>Android中的多进程模式</h2><h3 id="1-开启多进程模式"><a href="#1-开启多进程模式" class="headerlink" title="1. 开启多进程模式"></a>1. 开启多进程模式</h3><p>在Android中,开启多进程的方式是给四大组件(静态注册),加上process属性,让其运行在其他进程,默认的进程的名称为包名.</p><p>例如:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>           <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:remote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>          <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.SecondActivity<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[包名].remote<span class="token punctuation">"</span></span>          <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个<code>MainActivity</code>将运行在包名<code>+:remote</code>这个名称的进程中.而<code>SecondActivity</code>将运行在<code>[packageName].remote</code>这个进程中.</p><p>二者区别:</p><p>加冒号<code>&#39;:&#39;</code>这种方式是在当前进程名称前面附加上当前应用的包名,是一种简写方式;对于<code>SecondActivity</code>来说是完整的进程命名.此外,加冒号这种方式运行的进程是当前应用的私有进程,其他应用的组件不可以和它运行在同一个进程中,而采用完整命名的进行是全局进程,其他应用通过<code>ShareUID</code>方式可以和它运行在同一个进程中.</p><p><strong>Android系统会给每个应用分配一个唯一的UID,具有相同UID的应用才能共享数据,两个应用听过<code>ShareUID</code>运行在同一个进程是有要求的,这两个应用必须有相同的<code>ShareUID</code>并且包签名相同才可以.</strong></p><h3 id="2-多进程模式的运行机制"><a href="#2-多进程模式的运行机制" class="headerlink" title="2. 多进程模式的运行机制"></a>2. 多进程模式的运行机制</h3><p>多进程所带来的问题</p><ul><li>静态成员和单例完全失效</li><li>线程同步机制完全失效</li><li>SharePreference的可靠性下降(SP只是做了线程同步喂)</li><li>Application多次创建</li></ul><h2 id="IPC-基础概念"><a href="#IPC-基础概念" class="headerlink" title="IPC 基础概念"></a>IPC 基础概念</h2><h3 id="1-Serializable"><a href="#1-Serializable" class="headerlink" title="1. Serializable"></a>1. Serializable</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>6081784905993904744L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getSerialVersionUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> serialVersionUID<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化与反序列化<code>User</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//序列化</span>User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"duo"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反序列化</span> ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> User user2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Parcelable"><a href="#2-Parcelable" class="headerlink" title="2. Parcelable"></a>2. Parcelable</h3><p><code>parcelable</code>是Android提供的一种序列化和反序列化方式,它比<code>Serializable</code>效率更高一些.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcelable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by hefuduo on 2017/12/13. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token function">User</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        id <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Creator<span class="token operator">&lt;</span>User<span class="token operator">></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creator</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> User <span class="token function">createFromParcel</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span>Parcel dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Binder"><a href="#3-Binder" class="headerlink" title="3. Binder"></a>3. Binder</h3><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groovy DSL</title>
      <link href="/2017/08/28/2017-08-28-Groovy%20DSL-2017/"/>
      <url>/2017/08/28/2017-08-28-Groovy%20DSL-2017/</url>
      
        <content type="html"><![CDATA[<div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Groovy </tag>
            
            <tag> Gradle </tag>
            
            <tag> DSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groovy:MOP与元编程</title>
      <link href="/2017/08/28/2017-08-28-Groovy%E4%B8%8E%E5%85%83%E7%BC%96%E7%A8%8B-2017/"/>
      <url>/2017/08/28/2017-08-28-Groovy%E4%B8%8E%E5%85%83%E7%BC%96%E7%A8%8B-2017/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Groovy-MOP与元编程"><a href="#Groovy-MOP与元编程" class="headerlink" title="Groovy :MOP与元编程"></a>Groovy :MOP与元编程</h1><blockquote><p>在Java中,使用反射可以在运行时探索程序的结构,以及程序的类,累的方法,方法接受的参数.然而,我们仍然局限于所创建的静态结构.我们无法在运行时修改一个对象的类型,或是让它动态获取行为–至少现在还不能.如果可以基于应用的当前状态,或者是基于应用所接受的输入,动态地添加方法和行为,代码就会变得更加灵活,我们创造力和开发效率也会提高.那么Groovy就是提供了这一功能</p></blockquote><p>*元编程(metaprogramming)*意味着编写能够操作程序的程序,包括操作程序自身.像Groovy这样的动态语言通过元对象协议(MetaObject Protocal, MOP)提供了这种能力.利用Groovy的MOP,创建类,编写单元测试和引入模拟对象都是很容易的.</p><p>在Groovy中,使用MOP可以动态的调用方法,甚至可以在运行时合成类和方法.该特性让我们有这种感觉:对象顺利地修改了它的类.</p><p>讨论两个方面:Groovy对象的组成和Groovy如何解析Java对象和Grooy对象的方法调用.</p><h2 id="探索元对象"><a href="#探索元对象" class="headerlink" title="探索元对象"></a>探索元对象</h2><h3 id="Groovy-对象"><a href="#Groovy-对象" class="headerlink" title="Groovy 对象"></a>Groovy 对象</h3><p>Groovy对象是带有附加功能的Java对象.在Groovy中,Groovy对象比编译好的Java对象具有更多的动态行为.</p><p>在一个Groovy应用中,我们会使用三类对象:POJO,POGO和Groovy拦截器.</p><h3 id="查询方法和属性"><a href="#查询方法和属性" class="headerlink" title="查询方法和属性"></a>查询方法和属性</h3><p>调用一个方法</p><pre class="line-numbers language-groovy"><code class="language-groovy">str <span class="token operator">=</span> <span class="token string">"hello"</span>methodName <span class="token operator">=</span> <span class="token string">'toUpperCase'</span>methodOfInterest <span class="token operator">=</span> str<span class="token operator">.</span>metaClass<span class="token operator">.</span><span class="token function">getMetaMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span>println methodOfInterest<span class="token operator">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>respondsTo</code>方法判断是否存在方法</p><pre class="line-numbers language-groovy"><code class="language-groovy">str <span class="token operator">=</span> <span class="token string">"hello"</span>println String<span class="token operator">.</span>metaClass<span class="token operator">.</span><span class="token function">respondsTo</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">'toUpperCase'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'yes'</span> <span class="token punctuation">:</span> <span class="token string">'no'</span>  <span class="token comment" spellcheck="true">//yes</span>println String<span class="token operator">.</span>metaClass<span class="token operator">.</span><span class="token function">respondsTo</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">'compareTo'</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'yes'</span> <span class="token punctuation">:</span> <span class="token string">'no'</span> <span class="token comment" spellcheck="true">//yes</span>println String<span class="token operator">.</span>metaClass<span class="token operator">.</span><span class="token function">respondsTo</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">'toUpperCase'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'yes'</span> <span class="token punctuation">:</span> <span class="token string">'no'</span> <span class="token comment" spellcheck="true">//no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态的访问对象"><a href="#动态的访问对象" class="headerlink" title="动态的访问对象"></a>动态的访问对象</h3><p>除了前面介绍的方法和属性的查询方式和动态调用方式,Groovy还有其他比较方便的访问属性和调用方法的方式.一下为例子.</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">printInfo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    usrRequestedProperty <span class="token operator">=</span> <span class="token string">'bytes'</span>    usrRequestMethod <span class="token operator">=</span> <span class="token string">'toUpperCase'</span>        println obj<span class="token punctuation">[</span>usrRequestedProperty<span class="token punctuation">]</span>    println obj<span class="token operator">.</span><span class="token string">"$usrRequestedProperty"</span>        println obj<span class="token operator">.</span><span class="token string">"$usrRequestMethod"</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    println obj<span class="token operator">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span>usrRequestMethod<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>printInfo <span class="token string">'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-console"><code class="language-console">[104, 101, 108, 108, 111][104, 101, 108, 108, 111]HELLOHELLO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要迭代一个对象的所有属性,我们可以使用properties属性(或者getter)</p><p>如下:</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token string">'hello'</span><span class="token operator">.</span>properties<span class="token operator">.</span>each <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println it<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用MOP拦截方法"><a href="#使用MOP拦截方法" class="headerlink" title="使用MOP拦截方法"></a>使用MOP拦截方法</h2><blockquote><p>在Groovy中可以非常方便的实现AOP编程,比如方法拦截或者方法建议.<code>before advice | after advice | around advice</code>.</p></blockquote><h3 id="使用GroovyInterceptable拦截方法"><a href="#使用GroovyInterceptable拦截方法" class="headerlink" title="使用GroovyInterceptable拦截方法"></a>使用GroovyInterceptable拦截方法</h3><p>如果一个Groovy对象实现了<code>GroovyInterceptable</code>接口,那么当调用改对象上的任何一个方法时,不管是存在的还是不存在的,被调用的都将是<code>invokeMethod()</code>.也就是说,<code>GroovyInterceptable的invokeMethod方法劫持了该对象上的所有方法调用</code></p><p>如果想要实现<em>环绕建议</em>,只需要在这个方法内实现我们的逻辑.然而想实现<em>前置逻辑或后置建议或者both</em>,我们首先要实现自己的前置/后置逻辑,然后在恰当的时机路由到真实的方法,要路由调用,我们将使用<code>MetaMethod</code>,它可以从<code>MetaClass</code>获得</p><p>ps:</p><p>对于其他Groovy对象(没有实现上述接口的,只有调用到不存在的方法的时候才会调用该方法.有个例外,如果我们在一个对象的MetaClass上实现了<code>invokeMethod</code>不管方法存在与否,都会调用到该方法.</p><p>例子:</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">GroovyInterceptable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token operator">.</span>out<span class="token operator">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"check called ..."</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token operator">.</span>out<span class="token operator">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start called ..."</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token operator">.</span>out<span class="token operator">.</span>println <span class="token string">"drive called"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> <span class="token function">invokeMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token operator">.</span>out<span class="token operator">.</span>println <span class="token string">"Called to $name intercepted"</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token string">'check'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token operator">.</span>out<span class="token operator">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'running filter'</span><span class="token punctuation">)</span>            Car<span class="token operator">.</span>metaClass<span class="token operator">.</span><span class="token function">getMetaMethod</span><span class="token punctuation">(</span><span class="token string">'check'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> validMethod <span class="token operator">=</span> Car<span class="token operator">.</span>metaClass<span class="token operator">.</span><span class="token function">getMetaMethod</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>validMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            validMethod<span class="token operator">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Car<span class="token operator">.</span>metaClass<span class="token operator">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token operator">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token operator">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token operator">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    car<span class="token operator">.</span><span class="token function">speed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println e<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-console"><code class="language-console">Called to start interceptedrunning filtercheck called ...start called ...Called to drive interceptedrunning filtercheck called ...drive calledCalled to check interceptedcheck called ...Called to speed interceptedrunning filtercheck called ...groovy.lang.MissingMethodException: No signature of method: Car.speed() is applicable for argument types: () values: []Possible solutions: sleep(long), sleep(long, groovy.lang.Closure), split(groovy.lang.Closure), check(), start(), inspect()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用MetaClass拦截方法"><a href="#使用MetaClass拦截方法" class="headerlink" title="使用MetaClass拦截方法"></a>使用MetaClass拦截方法</h3><blockquote><p>使用GroovyInterceptable拦截了方法的调用,这种方式适合拦截作者是我们自己的类中的方法.然而,如果我们无权修改类的源代码,或者这个类是个Java类,就行不通了,此外,我们也可能在运行时决定基于某些条件或应用状态开始拦截调用,对于这几种情况,我们可以在MetaClass上实现<code>invokeMethod()</code>方法,并以此来拦截方法.</p></blockquote><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token operator">.</span>out<span class="token operator">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"check called ..."</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token operator">.</span>out<span class="token operator">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start called ..."</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token operator">.</span>out<span class="token operator">.</span>println <span class="token string">"drive called"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Car<span class="token operator">.</span>metaClass<span class="token operator">.</span>invokeMethod <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name<span class="token punctuation">,</span> args <span class="token operator">-></span>        System<span class="token operator">.</span>out<span class="token operator">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Call to $name intercepted ... "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token string">'check'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token operator">.</span>out<span class="token operator">.</span>print<span class="token string">"Running filter"</span>            Car<span class="token operator">.</span>metaClass<span class="token operator">.</span><span class="token function">getMetaMethod</span><span class="token punctuation">(</span><span class="token string">'check'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>delegate<span class="token punctuation">,</span>null<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">def</span> validMethod <span class="token operator">=</span> Car<span class="token operator">.</span>metaClass<span class="token operator">.</span><span class="token function">getMetaMethod</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>validMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            validMethod<span class="token operator">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>delegate<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Car<span class="token operator">.</span>metaClass<span class="token operator">.</span><span class="token function">invokeMissingMethod</span><span class="token punctuation">(</span>delegate<span class="token punctuation">,</span>name<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token operator">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token operator">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>car<span class="token operator">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    car<span class="token operator">.</span><span class="token function">speed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println e<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groovy之闭包</title>
      <link href="/2017/08/22/2017-08-22-groovy%E9%97%AD%E5%8C%85-2017/"/>
      <url>/2017/08/22/2017-08-22-groovy%E9%97%AD%E5%8C%85-2017/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包是一种可执行的代码块的方法，闭包也是对象，可以想方法一样传递参数。由于闭包是代码块，因此也可以在需要时执行。定义闭包的时候可以使用一个或者多个参数。闭包可以访问属性信息，意味着可以访问并修其作用于内的所有变量值。</p><h2 id="闭包-1"><a href="#闭包-1" class="headerlink" title="闭包"></a>闭包</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> greeting <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">def</span> clos <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    param <span class="token operator">-></span>        println <span class="token string">"$greeting $param"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>clos<span class="token operator">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>greeting <span class="token operator">=</span> <span class="token string">'welcome'</span>clos<span class="token operator">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>clos<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> greeting <span class="token operator">=</span> <span class="token string">'Bonjour'</span><span class="token comment" spellcheck="true">//this will not affect closure</span>    clos<span class="token operator">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'ken'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">demo</span><span class="token punctuation">(</span>clos<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//output welcome ken</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码说明，只有闭包被定义且存在，而不是在被调用时，可以访问其状态值。</p><p> 闭包也常用在集合中。使用闭包可以更高效的遍历元素。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token number">1</span><span class="token operator">.</span><span class="token function">upto</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println it <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//或者你也可以这么写</span><span class="token number">1</span><span class="token operator">.</span><span class="token function">upto</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println it<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//阶乘</span><span class="token keyword">def</span> fac <span class="token operator">=</span> <span class="token number">1</span><span class="token number">1</span><span class="token operator">.</span><span class="token function">upto</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    num <span class="token operator">-></span>        fac <span class="token operator">*=</span> num<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println <span class="token string">"Factorical : $fac"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包与集合和字符串"><a href="#闭包与集合和字符串" class="headerlink" title="闭包与集合和字符串"></a>闭包与集合和字符串</h2><p>常用each方法来遍历。</p><p><code>find()返回第一个满足条件的元素，findAll()返回所有满足条件的元素</code></p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>list<span class="token operator">.</span>findAll <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    it <span class="token operator">></span> <span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">.</span>each <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println it<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>any() and every()</code></p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">def</span> anyEle <span class="token operator">=</span> list<span class="token operator">.</span>any <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    it <span class="token operator">></span> <span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println anyEle <span class="token comment" spellcheck="true">//true</span><span class="token keyword">def</span> everyEle <span class="token operator">=</span> list<span class="token operator">.</span>every <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    it <span class="token operator">></span> <span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println everyEle  <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>collect() and inject</code></p><p>collect用来遍历集合并且返回一个集合</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//collect 返回一个由closure转换后的集合</span><span class="token keyword">def</span> newlist <span class="token operator">=</span> list<span class="token operator">.</span>collect <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    it <span class="token operator">*</span> it<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println newlist<span class="token comment" spellcheck="true">//collect 的高级范例</span><span class="token keyword">def</span> doubles <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    item <span class="token operator">-></span>        <span class="token number">2</span> <span class="token operator">*</span> item<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> triples <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    item <span class="token operator">-></span>        <span class="token number">3</span> <span class="token operator">*</span> item<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> isEven <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    item <span class="token operator">-></span>         item<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> <span class="token function">map</span><span class="token punctuation">(</span>clos<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token operator">.</span><span class="token function">collect</span><span class="token punctuation">(</span>clos<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>inject用来遍历集合，首先将需要传递的值和集合项目传递给必报，此时其传递的值将作为处理结果，然后再和下一个集合项目一起传递给闭包，以此类推</code></p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> factorial <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>        <span class="token operator">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    previous<span class="token punctuation">,</span> element <span class="token operator">-></span>        previous <span class="token operator">*</span> element<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println factorial<span class="token comment" spellcheck="true">//=====</span><span class="token keyword">def</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>factorial <span class="token operator">=</span> list<span class="token operator">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    prviouse<span class="token punctuation">,</span> element <span class="token operator">-></span>        prviouse <span class="token operator">*</span> element<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println factorial<span class="token comment" spellcheck="true">//=====</span><span class="token keyword">def</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">def</span> closure <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    previous<span class="token punctuation">,</span> element <span class="token operator">-></span>        previous <span class="token operator">*</span> element<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> factorial <span class="token operator">=</span> list<span class="token operator">.</span><span class="token function">inject</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>closure<span class="token punctuation">)</span>println factorial<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包的其他特性"><a href="#闭包的其他特性" class="headerlink" title="闭包的其他特性"></a>闭包的其他特性</h2><p>由于闭包也是一个对象，因此它可以作为方法的参数，同时也可以作为另一个闭包的参数。</p><h3 id="作为方法的参数"><a href="#作为方法的参数" class="headerlink" title="作为方法的参数"></a>作为方法的参数</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">filter</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> predict<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token operator">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>predict<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> isEven <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> isOdd <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x <span class="token operator">-></span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isEven</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token keyword">def</span> evens <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span>isEven<span class="token punctuation">)</span>println evens<span class="token keyword">def</span> odds <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span>isOdd<span class="token punctuation">)</span>println odds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作为另一个闭包的参数"><a href="#作为另一个闭包的参数" class="headerlink" title="作为另一个闭包的参数"></a>作为另一个闭包的参数</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> takewhile <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    predicate<span class="token punctuation">,</span> list <span class="token operator">-></span>        <span class="token keyword">def</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>element <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                result <span class="token operator">&lt;&lt;</span> element            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> isEven <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> isOdd <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x <span class="token operator">-></span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isEven</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> table1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token keyword">def</span> table2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token keyword">def</span> evens <span class="token operator">=</span> takewhile<span class="token operator">.</span><span class="token function">call</span><span class="token punctuation">(</span>isEven<span class="token punctuation">,</span>table1<span class="token punctuation">)</span>println evens<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        y<span class="token operator">-></span>            <span class="token keyword">return</span> x <span class="token operator">*</span> y    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> twice <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>println <span class="token function">twice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套闭包"><a href="#嵌套闭包" class="headerlink" title="嵌套闭包"></a>嵌套闭包</h3><h4 id="选择排序算法的实现"><a href="#选择排序算法的实现" class="headerlink" title="选择排序算法的实现"></a>选择排序算法的实现</h4><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> selection <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    list <span class="token operator">-></span>  <span class="token comment" spellcheck="true">//交换两个位置的数</span>        <span class="token keyword">def</span> swap <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sList<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q <span class="token operator">-></span>                <span class="token keyword">def</span> temp <span class="token operator">=</span> sList<span class="token punctuation">[</span>p<span class="token punctuation">]</span>                sList<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> sList<span class="token punctuation">[</span>q<span class="token punctuation">]</span>                sList<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">=</span> temp        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//找出最小数位置</span>        <span class="token keyword">def</span> minimumPosition <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pList<span class="token punctuation">,</span> from <span class="token operator">-></span>                <span class="token keyword">def</span> mPos <span class="token operator">=</span> from                <span class="token keyword">def</span> nextFrom <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> from                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">in</span> nextFrom<span class="token operator">..&lt;</span>pList<span class="token operator">.</span>size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pList<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pList<span class="token punctuation">[</span>mPos<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        mPos <span class="token operator">=</span> j                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> mPos        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> size <span class="token operator">=</span> list<span class="token operator">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">def</span> minPos <span class="token operator">=</span> <span class="token function">minimumPosition</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> k<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> minPos<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token keyword">def</span> sorted <span class="token operator">=</span> <span class="token function">selection</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>println sorted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关于闭包的更多信息"><a href="#关于闭包的更多信息" class="headerlink" title="关于闭包的更多信息"></a>关于闭包的更多信息</h1><h2 id="闭包和不确定性"><a href="#闭包和不确定性" class="headerlink" title="闭包和不确定性"></a>闭包和不确定性</h2><p>先看一个例子，闭包在实参列表外部。如果方法的最后一个参数是闭包，那么可以将它从实参列表中删除，并放在气候的括号后面。</p><p><code>demo(closure) 变为 demo closure</code></p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> greeting <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token keyword">def</span> clo <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    param <span class="token operator">-></span>        println <span class="token string">"$greeting $param"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>clos<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> greeting <span class="token operator">=</span> <span class="token string">'Bonjour'</span>    clos<span class="token operator">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'Ken'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//demo()clo error null point exception,解释见后。</span> demo clo<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    param <span class="token operator">-></span>        println <span class="token string">"welcome $param"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设<code>clos</code>是一个闭包变量，<code>&#123;...&#125;</code>是一个闭包体。假设<code>x</code>和<code>y</code>是两个随意设置的值，则查看如下不同的方法调用语句：</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token function">method</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">...</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//ok</span><span class="token function">method</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">...</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ok</span><span class="token function">method</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>clos<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//ok</span><span class="token function">method</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>clos <span class="token comment" spellcheck="true">//error no such method</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第二行代码把闭包体直接放在调用参数的后面。第四行代码说明，同样的做法也许不适用闭包变量。Groovy解释器无法忍冬clos标识符是该方法的调用的一部分，因此Groovy解释器就会报错，说明找不到只有具有两个参数的method方法。</p><p>如果method标识具有一个参数的方法：</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token punctuation">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则clos是个闭包变量，{…}是闭包体，如下调用语句</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token function">method</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">...</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ok</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">...</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//ok</span>method<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">...</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ok    </span><span class="token function">method</span><span class="token punctuation">(</span>clos<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//ok</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span>clos   <span class="token comment" spellcheck="true">//error null point exception </span>method clos    <span class="token comment" spellcheck="true">//ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五行代码中，调用方法时不适用任何实参，在该方法体中，形参将被初始化为null，在这个方法中使用闭包变量将会导致系统错误。</p><h2 id="闭包和方法"><a href="#闭包和方法" class="headerlink" title="闭包和方法"></a>闭包和方法</h2><p>对于如下两个结构</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> mDouble <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    n <span class="token operator">-></span>          <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> <span class="token function">mDouble</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前者是一个闭包定义，后者是一个方法定义。注意，任何闭包引用肯定有固定的作用域。不能出现同名的闭包变量，但是可以出现同名方法（方法重载）</p><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>像方法一样，闭包也可以被分配带默认值的参数。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> greeting <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    msg<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"leo"</span> <span class="token operator">-></span>        println <span class="token string">"$msg $name"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">"hello "</span><span class="token punctuation">)</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"julia"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包和作用域"><a href="#闭包和作用域" class="headerlink" title="闭包和作用域"></a>闭包和作用域</h2><p>上面讲到的局部闭包实现的选择性排序算法。下面讲一个使用冒泡算法排序。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> bubbleSort <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    list <span class="token operator">-></span>        <span class="token keyword">def</span> swap <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sList<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q <span class="token operator">-></span>                <span class="token keyword">def</span> temp                temp <span class="token operator">=</span> sList<span class="token punctuation">[</span>q<span class="token punctuation">]</span>                sList<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">=</span> sList<span class="token punctuation">[</span>p<span class="token punctuation">]</span>                sList<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> temp        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> size <span class="token operator">=</span> list<span class="token operator">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> sortedPosition <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>sortedPosition <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..&lt;</span><span class="token punctuation">(</span>size <span class="token operator">-</span> sortedPosition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> index<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            sortedPosition <span class="token operator">++</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>println list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，闭包只能由语句组成，这意味着闭包中不能有方法定义，因此局部闭包swap不能使用方法定义来替代。</p><h2 id="递归闭包"><a href="#递归闭包" class="headerlink" title="递归闭包"></a>递归闭包</h2><p>用递归的方法求<code>n!</code></p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> factorial <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    n <span class="token operator">-></span>        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> n <span class="token operator">*</span> <span class="token function">call</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="状态类型"><a href="#状态类型" class="headerlink" title="状态类型"></a>状态类型</h2><p>可以使用参数和返回值的动态类型来定义闭包。这个特性使得闭包更加通用。</p><h3 id="闭包的动态类型"><a href="#闭包的动态类型" class="headerlink" title="闭包的动态类型"></a>闭包的动态类型</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> times <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> times <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>println <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3.2</span><span class="token punctuation">,</span><span class="token number">4.15</span><span class="token punctuation">)</span>println <span class="token function">times</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用时，才确定x和y的类型</p><pre class="line-numbers language-console"><code class="language-console">1213.280hellohellohellohello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="静态指定参数类型的闭包"><a href="#静态指定参数类型的闭包" class="headerlink" title="静态指定参数类型的闭包"></a>静态指定参数类型的闭包</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> times <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Number x<span class="token punctuation">,</span> Number y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式就限定了闭包的参数类型，不能是Number及其子类意外的其他类型。</p><h2 id="有关实参的约定"><a href="#有关实参的约定" class="headerlink" title="有关实参的约定"></a>有关实参的约定</h2><p>在调用闭包时，实参的数量必须严格匹配闭包定义时的形参数量。否则，Groovy解释器就会报错，指示参数不正确。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> clos <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">-></span>   <span class="token string">"clos($a$b$c)"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">clos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//ok</span><span class="token function">clos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//error</span><span class="token function">clos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包、集合、范围"><a href="#闭包、集合、范围" class="headerlink" title="闭包、集合、范围"></a>闭包、集合、范围</h2><p>列表、映射、和范围等类型提供很多实用闭包作为参数的方法，这有利于迭代处理集合或者范围中的每个元素，并执行指定的任务。</p><p>迭代器方法</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>any*</td><td></td></tr><tr><td>collect*</td><td></td></tr><tr><td>collect*</td><td></td></tr><tr><td>each*</td><td></td></tr><tr><td>every*</td><td></td></tr><tr><td>find*</td><td></td></tr><tr><td>findAll*</td><td></td></tr><tr><td>findIndexOf*</td><td></td></tr><tr><td>inject*</td><td></td></tr><tr><td>reverseEach*</td><td></td></tr><tr><td>sort*</td><td></td></tr></tbody></table><h2 id="Return-语句"><a href="#Return-语句" class="headerlink" title="Return 语句"></a>Return 语句</h2><p>我们先看一个代码范例：</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">isMemberA</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> size <span class="token operator">=</span> list<span class="token operator">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> item<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> <span class="token function">isMemberB</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    list<span class="token operator">.</span>each <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> item<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span>println <span class="token function">isMemberA</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span>numbers<span class="token punctuation">)</span>println <span class="token function">isMemberA</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span>numbers<span class="token punctuation">)</span>println <span class="token function">isMemberB</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span>numbers<span class="token punctuation">)</span>println <span class="token function">isMemberB</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span>numbers<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//这个有问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-console"><code class="language-console">falsetruefalsefalse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显然，Groovy方式的返回是有问题的。这个是为什么呢？</p><p>在我们的范例中，作为实参的闭包包含一个return语句。闭包返回true，就会导致while循环继续处理列表中的下一个项目。</p><p>可以看一下<code>each</code>的实现方式</p><pre class="line-numbers language-groovy"><code class="language-groovy">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Iterator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">each</span><span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>T<span class="token operator">></span> self<span class="token punctuation">,</span> <span class="token annotation punctuation">@ClosureParams</span><span class="token punctuation">(</span>FirstGenericType<span class="token operator">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> Closure closure<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>self<span class="token operator">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Object arg <span class="token operator">=</span> self<span class="token operator">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            closure<span class="token operator">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> self<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到return是指返回的<code>closure.call()</code>但是外层循环还是在的，并不能直接终止循环，因此最终所有的数都会跑一边，这个是一个比较需要注意的地方，在使用<code>each</code>进行迭代的时候一定要注意哦！</p><h1 id="高级闭包"><a href="#高级闭包" class="headerlink" title="高级闭包"></a>高级闭包</h1><blockquote><p>假设某家超时使用特殊的商品价格来吸引新客户，以及维护已经有的客户。在一周内，也许早餐谷类视频的价格优惠1/3；在另一周内，优惠政策可能变化，化妆品销售按照买一送一的方式进行销售。在这种优惠政策经常变化的环境中，需要某种灵活的方式来定义这些“业务规则”，并且能够灵活的修改和调整。</p><p>此处的思路来源<a href="https://www.zhihu.com/question/20428688">多范式编程</a>方式，这是Groovy的一个非常重要的特性。借助更高级的函数，函数编程范式综合了多台、组合以及计算模式。</p></blockquote><h2 id="简单闭包"><a href="#简单闭包" class="headerlink" title="简单闭包"></a>简单闭包</h2><p>以前，把闭包描述为一个代码块。闭包实现参数化更加有价值，可以被引用，可以被当做参数传入方法，以及可以与call消息一起被调用。</p><p>范例：计算两个数值参数的乘积</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> multiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println <span class="token string">"multiply(3,4) = $&amp;#123;multiply(3,4)&amp;#125;"</span>println <span class="token string">"multiply(3.4,5.6) = $&amp;#123;multiply(3.4,5.6)&amp;#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于闭包可以引用对象的状态。</p><p>范例：作用域和闭包</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> multiplier <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">def</span> multiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x <span class="token operator">-></span>         <span class="token keyword">return</span> x <span class="token operator">*</span> multiplier<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println <span class="token string">"multiply(3) = $&amp;#123;multiply(3)&amp;#125;"</span>println <span class="token string">"multiply(5.6) = $&amp;#123;multiply(5.6)&amp;#125;"</span>multiplier <span class="token operator">=</span> <span class="token number">3</span>println <span class="token string">"multiply(3) = $&amp;#123;multiply(3)&amp;#125;"</span>println <span class="token string">"multiply(5.6) = $&amp;#123;multiply(5.6)&amp;#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在闭包定义范围内的变量可以从闭包代码内访问。</p><p>闭包是可以将另一个闭包返回的，类似一个二阶的函数</p><p>范例：闭包返回值</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> add <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> subtract <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> multiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> divide <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> arithmetic <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    arith <span class="token operator">-></span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>arith<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'ADD'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> add            <span class="token keyword">case</span> <span class="token string">'SUBTRACT'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> subtract            <span class="token keyword">case</span> <span class="token string">'MULTIPLY'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> multiply            <span class="token keyword">case</span> <span class="token string">'DIVIDE'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> divide            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> add        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> addOperation <span class="token operator">=</span> <span class="token function">arithmetic</span><span class="token punctuation">(</span><span class="token string">'ADD'</span><span class="token punctuation">)</span><span class="token keyword">def</span> mulOperation <span class="token operator">=</span> <span class="token function">arithmetic</span><span class="token punctuation">(</span><span class="token string">'MULTIPLY'</span><span class="token punctuation">)</span>println <span class="token string">"addOperation(3,4) = $&amp;#123;addOperation(3,4)&amp;#125;"</span>println <span class="token string">"mulOperation(3,4) = $&amp;#123;mulOperation(3,4)&amp;#125;"</span>println <span class="token function">arithmetic</span><span class="token punctuation">(</span><span class="token string">'DIVIDE'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部分应用"><a href="#部分应用" class="headerlink" title="部分应用"></a>部分应用</h2><p>在上面的范例2中，multiply闭包计算一个参数和内部变量multiplier的乘积。现在，如果把multiplier作为闭包的参数，这个闭包返回multiply闭包，后者计算自己的参数与multiplier的成绩，这就是闭包部分应用的范例。</p><p>范例：partial applicaiton</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> multiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> tripple <span class="token operator">=</span> multiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> quadroup <span class="token operator">=</span> multiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">def</span> twelve <span class="token operator">=</span> multiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>println <span class="token function">tripple</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>println <span class="token function">quadroup</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>println <span class="token function">twelve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**注意：表达式<code>multiply.curry(3)</code>**表示把参数乘以3的闭包。然后，被返回的闭包使用一个参数进行调用。在数学家Haskell Curry之后，闭包的部分应用被称为修正。闭包<code>triple</code>的定义如下：</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> triple <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    y <span class="token operator">-></span>          <span class="token keyword">return</span> <span class="token number">3</span> <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中，第一个参数被删除，所有出现第一个参数的地方使用数字3来替代。</p><p>加法和惩罚被称为可交换操作。这意味着<code>A+B = B+A and A*B = B*A</code>。但是减法和除法是不可交换的操作。我们可以事件类似于multiply的闭包。</p><p>范例：实现可交换操作</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> rSubtract <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    y<span class="token punctuation">,</span> x <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> lSubtract <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> subtract10 <span class="token operator">=</span> rSubtract<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">def</span> subractFrom20 <span class="token operator">=</span> lSubtract<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>println <span class="token function">subtract10</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>println <span class="token function">subractFrom20</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于修正闭包的一个重点是：<code>curry</code>方法的实参数量绝对不能超过该必报所需的实参实际数量。比如该闭包有有三个参数，则调用curry方法时，可以使用零个，一个，两个，或者三个实参。</p><p>部分应用可以被认为是一种简化形式，是个复杂任务可以被分解为多个子任务。</p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>结构化顺序的一种组织方式是顺序执行多个任务。通常而言，每部分任务被分别设计和实现。在此，也许认为，一个闭包标识需要执行的某个简单任务。适用组合概念进行任务合并，可以非常容易构造出复杂的任务。并且，借助不同的祝贺方式，可以较快的创建超时所需要的新任务，本文开篇所述案例。</p><p>范例：闭包组合</p><p>范例演示了composition闭包，这个闭包有两个参数f和g，两个参数代表闭包，把闭包g应用到x比如<code>g(x)</code>，把闭包f应用到处理结果比如<code>(fg(x))</code></p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> composition <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> x <span class="token operator">-></span>        println <span class="token string">"f:$&amp;#123;f.class&amp;#125; g: $&amp;#123;g.class&amp;#125; x: $&amp;#123;x.class&amp;#125;"</span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> composition2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> x <span class="token operator">-></span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> multiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> triple <span class="token operator">=</span> multiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> quadroup <span class="token operator">=</span> multiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">def</span> twelveTimes <span class="token operator">=</span> composition<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>triple<span class="token punctuation">,</span> quadroup<span class="token punctuation">)</span><span class="token keyword">def</span> multiplyCompo <span class="token operator">=</span> composition2<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>triple<span class="token punctuation">,</span>quadroup<span class="token punctuation">)</span>println <span class="token string">"twelveTimes(12) = $&amp;#123;twelveTimes(12)&amp;#125;"</span> <span class="token comment" spellcheck="true">//(3*(4 * 12)) = 144</span>println <span class="token string">"multiplyCompo(12) = $&amp;#123;multiplyCompo(12)&amp;#125;"</span> <span class="token comment" spellcheck="true">// 3*12 * 4*12 = 1728</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>闭包<code>triple</code>有一个参数，并把这个参数与3相乘。闭包<code>twelveTimes</code>是闭包<code>tripe和quadroup</code>的组合。结果是，闭包<code>twelveTimes</code>把参数乘以4，然后把乘法结果与3相乘。</p><p>范例：组合与集合</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> composition <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> x <span class="token operator">-></span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> multiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> triple <span class="token operator">=</span> multiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> quadroup <span class="token operator">=</span> multiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">def</span> twelveTimes <span class="token operator">=</span> composition<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>triple<span class="token punctuation">,</span>quadroup<span class="token punctuation">)</span><span class="token keyword">def</span> table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">.</span>collect<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    element <span class="token operator">-></span>        <span class="token keyword">return</span> <span class="token function">twelveTimes</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println <span class="token string">"tabl = $table "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算模式"><a href="#计算模式" class="headerlink" title="计算模式"></a>计算模式</h2><blockquote><p>介绍一种机制，是的闭包包含一种计算模式。</p></blockquote><p>范例是对列表中的每个元素按照某中形式进行转换。这种转换通常被命名为<code>map</code>。</p><p>范例：映射</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//map closure</span><span class="token keyword">def</span> map <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    clos<span class="token punctuation">,</span> list <span class="token operator">-></span>        <span class="token keyword">return</span> list<span class="token operator">.</span><span class="token function">collect</span><span class="token punctuation">(</span>clos<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//composition closure</span><span class="token keyword">def</span> compositon <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    f <span class="token punctuation">,</span>g <span class="token punctuation">,</span>x <span class="token operator">-></span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> multiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x <span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> triple <span class="token operator">=</span> multiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> quadroup <span class="token operator">=</span> multiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">def</span> tripleAll <span class="token operator">=</span> map<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>triple<span class="token punctuation">)</span><span class="token keyword">def</span> table <span class="token operator">=</span> <span class="token function">tripleAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>println table<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//实际的trpleAll将是一个CurryedClosure</span><span class="token comment" spellcheck="true">//quadroup的结构</span>quadroup <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    list <span class="token operator">-></span>           <span class="token keyword">return</span> list<span class="token operator">.</span>collect<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              element <span class="token operator">-></span>                  <span class="token keyword">return</span> <span class="token number">3</span> <span class="token operator">*</span> element           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于映射的一个等级模式是，如果把闭包（比如f）映射到列表x，然后把闭包（比如g）应用到前一个闭包的处理结果。那么上述过程就等价于把g和f的组合应用到这个列表x。</p><p>范例：处理等价关系</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//map closure</span><span class="token keyword">def</span> map <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    clos<span class="token punctuation">,</span> list <span class="token operator">-></span>        <span class="token keyword">return</span> list<span class="token operator">.</span><span class="token function">collect</span><span class="token punctuation">(</span>clos<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//composition closure</span><span class="token keyword">def</span> compositon <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> x <span class="token operator">-></span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> multiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> triple <span class="token operator">=</span> multiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> quadroup <span class="token operator">=</span> multiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">def</span> composeMapMap <span class="token operator">=</span> compositon<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>map<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>triple<span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>quadroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> table <span class="token operator">=</span> <span class="token function">composeMapMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// each element * 4 * 3</span>println table<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="业务规则"><a href="#业务规则" class="headerlink" title="业务规则"></a>业务规则</h2><blockquote><p>现在我们考虑如何计算一个Book的净价，在计算过程要考虑到上品折扣和政府税金，比如增值税。</p></blockquote><p>关于业务规则的实际实现</p><p>范例：净价计算</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> name    <span class="token keyword">def</span> author    <span class="token keyword">def</span> price    <span class="token keyword">def</span> category<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> bk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">'Groovy'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'KenB'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> category<span class="token punctuation">:</span> <span class="token string">'CompSci'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 参数列表初始化</span><span class="token keyword">def</span> discountRate <span class="token operator">=</span> <span class="token number">0.1</span><span class="token keyword">def</span> taxRate <span class="token operator">=</span> <span class="token number">0.17</span><span class="token keyword">def</span> rMultiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    y <span class="token punctuation">,</span> x <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> lMultiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x <span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> composition <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    f<span class="token punctuation">,</span>g<span class="token punctuation">,</span>x <span class="token operator">-></span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> calDiscounteedPrice <span class="token operator">=</span> rMultiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>discountRate<span class="token punctuation">)</span><span class="token keyword">def</span> calTax <span class="token operator">=</span> rMultiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> taxRate<span class="token punctuation">)</span><span class="token keyword">def</span> calcNetPrice <span class="token operator">=</span> composition<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>calTax<span class="token punctuation">,</span>calDiscounteedPrice<span class="token punctuation">)</span><span class="token keyword">def</span> netPrice <span class="token operator">=</span> <span class="token function">calcNetPrice</span><span class="token punctuation">(</span>bk<span class="token operator">.</span>price<span class="token punctuation">)</span>println <span class="token string">"netPrice = $&amp;#123;netPrice&amp;#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：有上限折扣</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> name    <span class="token keyword">def</span> author    <span class="token keyword">def</span> price    <span class="token keyword">def</span> category<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> bk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">'Groovy'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'KenB'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> category<span class="token punctuation">:</span> <span class="token string">'CompSci'</span><span class="token punctuation">)</span><span class="token keyword">def</span> discountRate <span class="token operator">=</span> <span class="token number">0.1</span><span class="token keyword">def</span> taxRate <span class="token operator">=</span> <span class="token number">0.17</span><span class="token keyword">def</span> maxDiscount <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">def</span> rMultiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    y<span class="token punctuation">,</span> x <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> lMultiply <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> subtract <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> rSubtract <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    y<span class="token punctuation">,</span> x <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> lSubtract <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> min <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> id <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x <span class="token operator">-></span>        <span class="token keyword">return</span> x<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> composition <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> x <span class="token operator">-></span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> bComposition <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    h<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> x <span class="token operator">-></span>        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> calcDiscount <span class="token operator">=</span> rMultiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>discountRate<span class="token punctuation">)</span><span class="token keyword">def</span> calcActuralDiscount <span class="token operator">=</span> bComposition<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> calcDiscount<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token keyword">def</span> calcDiscountedPrice <span class="token operator">=</span> bComposition<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>subtract<span class="token punctuation">,</span> id<span class="token punctuation">,</span> calcActuralDiscount<span class="token punctuation">)</span><span class="token keyword">def</span> calcTax <span class="token operator">=</span> rMultiply<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> taxRate<span class="token punctuation">)</span><span class="token keyword">def</span> calcNetPrice <span class="token operator">=</span> composition<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>calcTax<span class="token punctuation">,</span>calcDiscountedPrice<span class="token punctuation">)</span>println <span class="token string">"bk.price : $bk.price"</span><span class="token keyword">def</span> netPrice <span class="token operator">=</span> <span class="token function">calcNetPrice</span><span class="token punctuation">(</span>bk<span class="token operator">.</span>price<span class="token punctuation">)</span>println <span class="token string">"netprice = $netPrice"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>以上范例开发了大量非常有价值的闭包，可以非常灵活的合并使用。因此，有必要把这些闭包都打包到一个类中去，这样更加容易引入到应用程序。</p><pre class="line-numbers language-groovyy"><code class="language-groovyy">abstract class Functor &#123;    public static Closure bAdd = &#123;        x, y -> return x + y    &#125;    public static Closure rAdd = &#123;        y, x -> return x + y    &#125;        public static Closure bSubtract = &#123;        x , y -> return x - y    &#125;    //blabla&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类包含了算数的闭包。</p><h2 id="闭包与协程"><a href="#闭包与协程" class="headerlink" title="闭包与协程"></a>闭包与协程</h2><p>调用一个函数或方法会在程序的执行序列创建一个新的作用域.我们会在一个入口点进入函数.在方法完成之后,回到调用者的作用域.</p><p>协程(Coroutine)则支持多个入口点,每个入口点都是上次挂起调用的位置.我们可以进入一个函数,执行部分代码,挂起,在回到调用者的上下文或作用域内执行一些代码.之后我们可以在挂起的地方恢复该函数的执行.</p><p>写成对于实现某些特殊的逻辑或算法非常方便,比如用着生产者-消费者问题中.生产者会接受一些输入,对输入做一些厨师处理,通知消费者拿走处理过的值并做进一步计算,并输出或存出结果.消费者处理它那部分工作,完成之后通知生产者以获取更多输入.</p><p>在Java中,<code>wait() and notify()</code>与多线程借个使用,可以实现协程.闭包会让人产生”协程是在一个线程中执行”的感觉or错觉.</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">iterate</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> closure<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token number">1</span><span class="token operator">.</span><span class="token function">upto</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println <span class="token string">"In iterate with value $&amp;#123;it&amp;#125;"</span>        <span class="token function">closure</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println <span class="token string">"Calling iterate"</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    total <span class="token operator">+=</span> it    println <span class="token string">"In closure total so far is $&amp;#123;total&amp;#125;"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println <span class="token string">"Done"</span><span class="token comment" spellcheck="true">/**每次调用闭包,我们都会从上一次调用中回复total的值.  //可是我并没有从例子中看出什么是协程????*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>协程不是进程或线程，其执行过程更类似于子例程，或者说不带返回值的<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/4127405">函数调用</a>。 协程还是比较复杂,嗯后续在研究研究.</p><h2 id="闭包委托"><a href="#闭包委托" class="headerlink" title="闭包委托"></a>闭包委托</h2><p>Groovy的闭包支持方法委托,而且提供了方法分派能力.</p><p><code>this,owner and delegate</code>是闭包的三个属性,用于确定有那个对象处理闭包内的方法调用,一般而言,<code>delegate 会被设置为 owner</code>,但是对其进行修改,可以有非常好的元编程能力.</p><p>利用闭包委托,可以更好的写出DSL,将在DSL好好的讲述本内容.</p><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>有关函数式编程，可参考阮一峰老师的博客，在这里引用阮一峰老师的博客，特此注明，并非常感谢老师能够出一片教程给大家科普一下。</p><p><a href="http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html">函数式编程入门教程–阮一峰</a></p><p>ps:自己的一些理解</p><p>对于函数式编程中的柯里化，对应高中数学的只是，其实就是函数的一个组合。为了组合函数，需要将多个多参数函数转换成单参数函数。</p><p>举个🌰：<br>$$<br>z = x + y<br>$$</p><p>$$<br>z = x * y<br>$$</p><p>如果我想得到一个复合函数使得2-&gt;映射到8，计算过程为<code>2 * 3 + 2</code></p><p>那么我怎么得到这个函数呢？定义这个映射为f<br>$$<br>f(x) = x * 3  +  2<br>$$<br>那么在程序中我们怎么体现呢</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//这里的函数都是以闭包形式表示的准确来说这不是一个"方法",而是一个闭包的对象</span><span class="token comment" spellcheck="true">//首先我们需要一个加法函数，这个加法函数是一个广义的</span><span class="token keyword">def</span> add <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后我们需要一个乘法函数,同样是一个广义的</span><span class="token keyword">def</span> multiple <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">,</span> y <span class="token operator">-></span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后我们定义一个组合,这个组合是嵌套函数,两个映射f,g和一个自变量x</span><span class="token keyword">def</span> compose <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> x <span class="token operator">-></span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//add.curry(2)  :  y = 2 + z</span><span class="token comment" spellcheck="true">//multiple.curry(2)  : z = 3 * x 注:这里只是为了方便,变量名并不代表带入关系</span><span class="token comment" spellcheck="true">//compose.curry(add2,multiple3) = : z = 2 + (3 * x)</span><span class="token keyword">def</span> add2 <span class="token operator">=</span> add<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">def</span> multiple3 <span class="token operator">=</span> multiple<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> addAndMultiple <span class="token operator">=</span> compose<span class="token operator">.</span><span class="token function">curry</span><span class="token punctuation">(</span>add2<span class="token punctuation">,</span>multiple3<span class="token punctuation">)</span>println <span class="token function">addAndMultiple</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groovy之面向对象与泛型</title>
      <link href="/2017/08/22/2017-08-22-groovy%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%B3%9B%E5%9E%8B-2017/"/>
      <url>/2017/08/22/2017-08-22-groovy%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%B3%9B%E5%9E%8B-2017/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="变量声明范例"><a href="#变量声明范例" class="headerlink" title="变量声明范例"></a>变量声明范例</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> fieldWithModifier    String typedField    <span class="token keyword">def</span> untypedField    <span class="token keyword">protected</span> filed1<span class="token punctuation">,</span> filed2<span class="token punctuation">,</span> filed3        <span class="token keyword">static</span> ClassFiled        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONSTA <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span> CONSTB <span class="token operator">=</span> <span class="token string">'b'</span>        <span class="token keyword">def</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> localUntypedVar <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">int</span> localTyoedVar <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">def</span> localVarWithoutAssignment<span class="token punctuation">,</span> andAnotherOne    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> localVar <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">//脚本声明变量</span>boundVar <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">someMthod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    localMethodVar <span class="token operator">=</span> <span class="token number">1</span>    boundVar2 <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//定位字段</span><span class="token keyword">class</span> <span class="token class-name">Counter</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>counter<span class="token operator">.</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">assert</span> counter<span class="token operator">.</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token keyword">def</span> fieldNam <span class="token operator">=</span> <span class="token string">'count'</span>counter<span class="token punctuation">[</span>fieldName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">assert</span> counter<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法声明"><a href="#方法声明" class="headerlink" title="方法声明"></a>方法声明</h2><h3 id="方法返回值声明"><a href="#方法返回值声明" class="headerlink" title="方法返回值声明"></a>方法返回值声明</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> some <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token string">'hi'</span> <span class="token operator">==</span> some<span class="token operator">.</span><span class="token function">publicUntyedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token string">'ho'</span> <span class="token operator">==</span> some<span class="token operator">.</span><span class="token function">publicTypedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">combineMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">publicVoidMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> <span class="token function">pubicVoidMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'hi'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  String <span class="token function">publicTypedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'ho'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">combineMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法参数声明"><a href="#方法参数声明" class="headerlink" title="方法参数声明"></a>方法参数声明</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token function">method</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println <span class="token string">'untyped'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token function">method</span><span class="token punctuation">(</span>String arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println <span class="token string">'typed'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token function">method</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> Number arg2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println <span class="token string">'mixed'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高级方法参数使用"><a href="#高级方法参数使用" class="headerlink" title="高级方法参数使用"></a>高级方法参数使用</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">Summer</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> <span class="token function">sumWithDefaults</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> cs  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">sumWithList</span><span class="token punctuation">(</span>List args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> args<span class="token operator">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum<span class="token punctuation">,</span>i <span class="token operator">-></span>              sum <span class="token operator">+=</span> i    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">sumWithOptionals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> object<span class="token punctuation">[</span><span class="token punctuation">]</span> optionals<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token function">sumWithList</span><span class="token punctuation">(</span>optionals<span class="token operator">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">sumNamed</span><span class="token punctuation">(</span>Map args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">.</span>each<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        args<span class="token operator">.</span><span class="token function">get</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> args<span class="token operator">.</span>a <span class="token operator">+</span> args<span class="token operator">.</span>b <span class="token operator">+</span> args<span class="token operator">.</span>c  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">VendorWithCtor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name<span class="token punctuation">,</span> product        <span class="token function">VendorWithCtor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>product<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token operator">.</span>product <span class="token operator">=</span> product    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VendorWithCtor</span><span class="token punctuation">(</span><span class="token string">'canoo'</span><span class="token punctuation">,</span><span class="token string">'ULC'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Normal constructor use</span><span class="token keyword">def</span> second <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Canoo'</span><span class="token punctuation">,</span> <span class="token string">'ULC'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> VendorWithCtor <span class="token comment" spellcheck="true">// Coercion with as</span>VendorWithCtor third <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Canoo'</span><span class="token punctuation">,</span> <span class="token string">'ULC'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// Corecion in assignment</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">Vendor</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name<span class="token punctuation">,</span> product<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vendor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vendor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">'Canoo'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vendor</span><span class="token punctuation">(</span>product<span class="token punctuation">:</span> <span class="token string">'ULC'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vendor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">'Canoo'</span><span class="token punctuation">,</span> product<span class="token punctuation">:</span> <span class="token string">'ULC'</span><span class="token punctuation">)</span><span class="token keyword">def</span> vendor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vendor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">'Canoo'</span><span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token string">'Canoo'</span> <span class="token operator">==</span> vendor<span class="token operator">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="隐式构造函数"><a href="#隐式构造函数" class="headerlink" title="隐式构造函数"></a>隐式构造函数</h3><pre><code>java.awt.Dimension areaarea = [200,100]assert area.width == 200assert area.height == 100</code></pre><h2 id="属性获取设置器"><a href="#属性获取设置器" class="headerlink" title="属性获取设置器"></a>属性获取设置器</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">MyBean</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> a  <span class="token keyword">def</span> b    <span class="token keyword">def</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">setA</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">.</span>a <span class="token operator">=</span> a  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">setB</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">.</span>b <span class="token operator">=</span> b  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> mb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mb<span class="token operator">.</span>a <span class="token operator">=</span> <span class="token number">10</span>mb<span class="token operator">.</span>b <span class="token operator">=</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>属性获取方法,Groovy方式直接.属性名就可以了.</p><table><thead><tr><th align="center">Java</th><th align="center">Groovy</th></tr></thead><tbody><tr><td align="center">getPropertyName</td><td align="center">propertyName</td></tr><tr><td align="center">setPropertyName(value)</td><td align="center">propertyName = value</td></tr></tbody></table><h3 id="属性获取器和-语法的使用区别"><a href="#属性获取器和-语法的使用区别" class="headerlink" title="属性获取器和@语法的使用区别"></a>属性获取器和@语法的使用区别</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">MrBean</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String firstName<span class="token punctuation">,</span> lastName    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"$firstName $lastName"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MrBean</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token string">'Rowan'</span><span class="token punctuation">)</span>bean<span class="token operator">.</span>lastName <span class="token operator">=</span> <span class="token string">'Atkinson'</span><span class="token comment" spellcheck="true">//advanced accessors with groovy</span><span class="token keyword">class</span> <span class="token class-name">DoubleBean</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> value <span class="token comment" spellcheck="true">//visible value</span>        <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">.</span>value <span class="token operator">=</span> value  <span class="token comment" spellcheck="true">//inner field access</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        value <span class="token operator">*</span> <span class="token number">2</span>     <span class="token comment" spellcheck="true">//inner field access</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> bean2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleBean</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token number">200</span> <span class="token operator">==</span> bean2<span class="token operator">.</span>value   <span class="token comment" spellcheck="true">//Property access  use getter method</span><span class="token keyword">assert</span> <span class="token number">100</span> <span class="token operator">==</span> bean2<span class="token operator">.@</span>value   <span class="token comment" spellcheck="true">// Outer field access  directly access</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GPaths查询对象"><a href="#GPaths查询对象" class="headerlink" title="GPaths查询对象"></a>GPaths查询对象</h2><p>invoke example for Gpath</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name    List authors<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name    Address addr<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String province    String city<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> addr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span>province<span class="token punctuation">:</span><span class="token string">'Guangdong'</span><span class="token punctuation">,</span>city<span class="token punctuation">:</span><span class="token string">'Shenzhen'</span><span class="token punctuation">)</span><span class="token keyword">def</span> addr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span>province<span class="token punctuation">:</span><span class="token string">'Gunagdong'</span><span class="token punctuation">,</span>city<span class="token punctuation">:</span><span class="token string">'Guangzhou'</span><span class="token punctuation">)</span><span class="token keyword">def</span> addr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span>province<span class="token punctuation">:</span><span class="token string">'Hunan'</span><span class="token punctuation">,</span>city<span class="token punctuation">:</span><span class="token string">'Changsha'</span><span class="token punctuation">)</span><span class="token keyword">def</span> addr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span>province<span class="token punctuation">:</span><span class="token string">'Hubei'</span><span class="token punctuation">,</span>city<span class="token punctuation">:</span><span class="token string">'Wuhan'</span><span class="token punctuation">)</span><span class="token keyword">def</span> books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'A glance at Java'</span><span class="token punctuation">,</span>authors<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span>addr<span class="token punctuation">:</span>addr1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'Deep into Groovy'</span><span class="token punctuation">,</span>authors<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span>addr<span class="token punctuation">:</span>addr1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'Mike'</span><span class="token punctuation">,</span>addr<span class="token punctuation">:</span>addr3<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'A compare of Struts and Grails'</span><span class="token punctuation">,</span>authors<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'Wallace'</span><span class="token punctuation">,</span>addr<span class="token punctuation">:</span>addr4<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'Bill'</span><span class="token punctuation">,</span>addr<span class="token punctuation">:</span>addr2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'learning from Groovy to Grails'</span><span class="token punctuation">,</span>authors<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token string">'Wallace'</span><span class="token punctuation">,</span>addr<span class="token punctuation">:</span>addr3<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//目标是找到作者是"Tom"的书籍的书名</span><span class="token comment" spellcheck="true">//Java风格</span><span class="token keyword">def</span> booksOfTomOldWay <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>books<span class="token operator">.</span>each <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> book <span class="token operator">=</span> it    <span class="token keyword">def</span> aus <span class="token operator">=</span> it<span class="token operator">.</span>authors        aus<span class="token operator">.</span>each <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        au<span class="token operator">-></span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>au<span class="token operator">.</span>name <span class="token operator">==</span> <span class="token string">'Tom'</span><span class="token punctuation">)</span>                booksOfTomOldWay <span class="token operator">&lt;&lt;</span> book<span class="token operator">.</span>name    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println booksOfTomOldWay<span class="token comment" spellcheck="true">//Groovy风格 非常简练,也符合一个正常的思考顺序.</span><span class="token keyword">def</span> booksOfTom <span class="token operator">=</span> books<span class="token operator">.</span>grep<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    it<span class="token operator">.</span>authors<span class="token operator">.</span>any<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        it<span class="token operator">.</span>name <span class="token operator">==</span> <span class="token string">'Tom'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">.</span>nameprintln booksOfTom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="空操作安全"><a href="#空操作安全" class="headerlink" title="空操作安全"></a>空操作安全</h2><pre class="line-numbers language-groovy"><code class="language-groovy">Duck duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>duck<span class="token operator">?.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ?.标识如果对象是一个空值,那么久不调用函数.只有非空对象才会执行函数的调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groovy简明教程</title>
      <link href="/2017/08/03/2017-08-02-Groovy%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B-2017/"/>
      <url>/2017/08/03/2017-08-02-Groovy%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B-2017/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="Groovy特点"><a href="#Groovy特点" class="headerlink" title="Groovy特点"></a>Groovy特点</h2><ul><li>同时支持静态与动态类型</li><li>支持运算符重载</li><li>对于正则表达式的本地支持</li><li>对xml和html的原生支持</li><li>与Java无缝衔接</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>可以参考Groovy官网上的方式，利用SDK来安装Groovy。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="Helloword"><a href="#Helloword" class="headerlink" title="Helloword"></a>Helloword</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//类似Java的方式</span><span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Using a simple printn statement to print output to console.</span>    <span class="token function">println</span><span class="token punctuation">(</span>'hello world<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果用Groovy脚本的方式：</span>    println <span class="token string">'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">import</span> groovy<span class="token operator">.</span>xml<span class="token operator">.</span>MarkupBuilder<span class="token keyword">def</span> xml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MarkupBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认情况下，Groovy在代码中包括了一些库，不需要显示的导入。</p><pre class="line-numbers language-groovy"><code class="language-groovy">java<span class="token operator">.</span>lang<span class="token operator">.</span><span class="token operator">*</span><span class="token punctuation">;</span>java<span class="token operator">.</span>util<span class="token operator">.</span><span class="token operator">*</span><span class="token punctuation">;</span>java<span class="token operator">.</span>io<span class="token operator">.</span><span class="token operator">*</span><span class="token punctuation">;</span>java<span class="token operator">.</span>net<span class="token operator">.</span><span class="token operator">*</span><span class="token punctuation">;</span>groovy<span class="token operator">.</span>lang<span class="token operator">.</span><span class="token operator">*</span><span class="token punctuation">;</span>groovy<span class="token operator">.</span>util<span class="token operator">.</span><span class="token operator">*</span><span class="token punctuation">;</span>java<span class="token operator">.</span>math<span class="token operator">.</span>BigInteger<span class="token punctuation">;</span>java<span class="token operator">.</span>math<span class="token operator">.</span>BigDecimal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Groovy语句"><a href="#Groovy语句" class="headerlink" title="Groovy语句"></a>Groovy语句</h2><p>语句可以是一个关键字，一个标识符，常量，字符串文字或者是符号</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>参考Java的就可以</p><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>Groovy可以不用写分号一行就是一条语句</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>Groovy声明变量的方式是利用def 关键字。标识符以字母，美元或者下划线开头。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> employee<span class="token keyword">def</span> student<span class="token keyword">def</span> conter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>浮点数，整数，字符和字符串</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> i <span class="token operator">=</span> <span class="token number">12</span><span class="token keyword">def</span> j <span class="token operator">=</span> <span class="token number">12.5</span><span class="token keyword">def</span> a <span class="token operator">=</span> <span class="token string">'a'</span><span class="token keyword">def</span> s1 <span class="token operator">=</span> <span class="token string">"aaa"</span><span class="token keyword">def</span> s2 <span class="token operator">=</span> <span class="token string">'aaaaaaa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h2><ul><li>byte </li><li>short </li><li>int</li><li>long</li><li>float</li><li>double</li><li>char</li><li>boolean</li><li>String</li></ul><h2 id="数字类（Number）"><a href="#数字类（Number）" class="headerlink" title="数字类（Number）"></a>数字类（Number）</h2><ul><li>Byte</li><li>Short</li><li>Integer</li><li>Long</li><li>Float</li><li>Double</li><li>BigInteger</li><li>BIgDecimal</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量的声明有两种：</p><p>一种是类似Java的方式声明，一种是利用def关键字，变量的类型在赋值的时候去确定。</p><pre class="line-numbers language-groovy"><code class="language-groovy">String a <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">def</span> a <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">def</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1112234"</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//利用def的方式，变量的类型还可以随时动态的切换</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li></ul><p>主要介绍一下Groovy比Java多出的一些特性</p><p><strong>范围运算符</strong></p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> range <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">5</span><span class="token function">println</span><span class="token punctuation">(</span>range<span class="token operator">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>输出</strong></p><pre class="line-numbers language-tex"><code class="language-tex">class groovy.lang.IntRange[0, 1, 2, 3, 4, 5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">while</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//execution</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//excution</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//for in</span><span class="token keyword">for</span><span class="token punctuation">(</span>var <span class="token keyword">in</span> range<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//for 语句也可以用于循环访问map,将输出一个键值</span><span class="token keyword">def</span> e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">in</span> e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>终止内层循环</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>当执行continue语句时，控制立即传递到最近的封闭循环的测试条件，以确定循环是否应该继续。对于该特定循环迭代，循环体中的所有后续语句都将被忽略。</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>Groovy用def关键字定方法。方法可以接受任意数量参数，可不用显示定义类型。可以添加修饰符，默认的是public的。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">methodName</span><span class="token punctuation">(</span>parm1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> param3<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//code </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>可以添加任意多个参数，并且可以指定默认参数，但是默认参数必须定义在参数列表的末尾。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">someMethod</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token operator">.</span> param3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//method code </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">add</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x <span class="token operator">+</span> y <span class="token operator">+</span> z <span class="token operator">+</span> w<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码，默认的返回最后一行表达式的值。</p><p>但是为了避免歧义：我们可以通过这种方式来进行：</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义返回值类型。</span>    x <span class="token operator">+</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//or</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过以上两种方式可以明确这个方法是否有返回值，这样避免歧义。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h1><p>Groovy在使用IO时提供了许多辅助方法。Groovy提供了更简单的类来为文件提供以下功能：</p><ul><li>读取文件</li><li>写入文件</li><li>遍历文件树</li><li>读取和写入数据对象到文件</li></ul><p>也可以使用java.io.*下面的所有标准Java类</p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/hefuduo/hefuduo.profile"</span><span class="token punctuation">)</span><span class="token operator">.</span>eachLine <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    line <span class="token operator">-></span> println line<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果要将文件的整个内容作为字符串获取，可以使用文件类的text属性。</p><pre class="line-numbers language-groovy"><code class="language-groovy">File fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/hefuduo/hefuduo.profile"</span><span class="token punctuation">)</span>println fi<span class="token operator">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者使用Java提供的<code>InputStream</code></p><pre class="line-numbers language-groovy"><code class="language-groovy">File fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/hefuduo/hefuduo.profile"</span><span class="token punctuation">)</span>InputStream it <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fi<span class="token punctuation">)</span>it<span class="token operator">.</span>eachLine <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println it<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><pre class="line-numbers language-groovy"><code class="language-groovy">File fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/hefuduo/hefuduo.profile"</span><span class="token punctuation">)</span>fi<span class="token operator">.</span>withWriter <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    it<span class="token operator">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Job : computer engineer"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println fi<span class="token operator">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以追加的形式写入文件：</p><pre class="line-numbers language-java"><code class="language-java">File fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/hefuduo/hefuduo.profile"</span><span class="token punctuation">)</span>OutputStream stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fi<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>stream<span class="token punctuation">.</span>withWriter <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    it<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"age:27"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fi<span class="token punctuation">.</span>eachLine <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println it<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取文件大小"><a href="#获取文件大小" class="headerlink" title="获取文件大小"></a>获取文件大小</h2><pre class="line-numbers language-groovy"><code class="language-groovy">File fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/hefuduo/hefuduo.profile"</span><span class="token punctuation">)</span>println fi<span class="token operator">.</span>absolutePathprintln fi<span class="token operator">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="测试文件是否是目录"><a href="#测试文件是否是目录" class="headerlink" title="测试文件是否是目录"></a>测试文件是否是目录</h2><pre class="line-numbers language-groovy"><code class="language-groovy">println fi<span class="token operator">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>println fi<span class="token operator">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="创建与删除目录"><a href="#创建与删除目录" class="headerlink" title="创建与删除目录"></a>创建与删除目录</h2><pre class="line-numbers language-groovy"><code class="language-groovy">File fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/hefuduo/dirtest/"</span><span class="token punctuation">)</span>fi<span class="token operator">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fi<span class="token operator">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><pre class="line-numbers language-groovy"><code class="language-groovy">File fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/hefuduo/hefuduo.profile"</span><span class="token punctuation">)</span><span class="token keyword">def</span> src <span class="token operator">=</span> fi<span class="token keyword">def</span> dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fi<span class="token operator">.</span>absolutePath<span class="token punctuation">)</span>dst <span class="token operator">&lt;&lt;</span> src<span class="token operator">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取目录中的所有内容"><a href="#获取目录中的所有内容" class="headerlink" title="获取目录中的所有内容"></a>获取目录中的所有内容</h2><pre class="line-numbers language-groovy"><code class="language-groovy">File fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/hefuduo/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> files <span class="token operator">=</span> fi<span class="token operator">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>println files<span class="token operator">.</span>lengthfiles<span class="token operator">.</span>each <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println it<span class="token operator">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要递归的显示目录与子目录中的所有文件，则可以使用File了<code>eachFileRecurse</code>函数。</p><pre class="line-numbers language-groovy"><code class="language-groovy">File fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/hefuduo/"</span><span class="token punctuation">)</span>fi<span class="token operator">.</span>eachFileRecurse <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    file <span class="token operator">-></span>        println file<span class="token operator">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Groovy-可选"><a href="#Groovy-可选" class="headerlink" title="Groovy 可选"></a>Groovy 可选</h1><p>Groovy是个动态类型语言，相对Java的强类型语言，Groovy在编写代码时候，可以灵活的提供类型或不是类型。</p><h1 id="Groovy内部数据"><a href="#Groovy内部数据" class="headerlink" title="Groovy内部数据"></a>Groovy内部数据</h1><h2 id="Groovy数字"><a href="#Groovy数字" class="headerlink" title="Groovy数字"></a>Groovy数字</h2><p>在Groovy中，数字实际上标识为对象，他们都是类<code>Integer</code>的一个实例。</p><p>Groovy支持整数和浮点数</p><pre class="line-numbers language-java"><code class="language-java">Integer x <span class="token operator">=</span> <span class="token number">5</span>Float y <span class="token operator">=</span> <span class="token number">1.25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">0</span>z <span class="token operator">=</span> x <span class="token operator">+</span> yprintln z<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Groovy字符串"><a href="#Groovy字符串" class="headerlink" title="Groovy字符串"></a>Groovy字符串</h2><p>Groovy提供了多种表示String字面量的方法。 Groovy中的字符串可以用单引号（’），双引号（“）或三引号（”“”）括起来。此外，由三重引号括起来的Groovy字符串可以跨越多行。</p><h3 id="字符串索引"><a href="#字符串索引" class="headerlink" title="字符串索引"></a>字符串索引</h3><pre class="line-numbers language-groovy"><code class="language-groovy">String sample <span class="token operator">=</span> <span class="token string">"Hello Groovy"</span>println sample<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>println sample<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>println sample<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">2</span><span class="token punctuation">]</span>println sample<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">..</span><span class="token number">2</span><span class="token punctuation">]</span>println sample<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Groovy范围"><a href="#Groovy范围" class="headerlink" title="Groovy范围"></a>Groovy范围</h2><p>范围是指定值序列的速记。范围由序列中的第一个和最后一个值表示，Range可以是包含或排除。包含范围包括从第一个到最后一个的所有值，而独占范围包括除最后一个之外的所有值。这里有一些范例文字的例子 - </p><ul><li>1..10 - 包含范围的示例</li><li>1 .. &lt;10 - 独占范围的示例</li><li>‘a’..’x’ - 范围也可以由字符组成</li><li>10..1 - 范围也可以按降序排列</li><li>‘x’..’a’ - 范围也可以由字符组成并按降序排列。</li></ul><h2 id="Groovy列表"><a href="#Groovy列表" class="headerlink" title="Groovy列表"></a>Groovy列表</h2><p>列表是用于存储数据项集合的结构。在Groovy中，List保存了一系列对象引用。List中的对象引用占据序列中的位置，并通过整数索引来区分。列表文字表示为一系列用逗号分隔并用方括号括起来的对象。</p><p>要处理列表中的数据，我们必须能够访问各个元素。 Groovy列表使用索引操作符[]索引。列表索引从零开始，这指的是第一个元素。</p><p>以下是一些列表的示例 - </p><ul><li>[11，12，13，14] - 整数值列表</li><li>[‘Angular’，’Groovy’，’Java’] - 字符串列表</li><li>[1，2，[3，4]，5] - 嵌套列表</li><li>[‘Groovy’，21，2.11] - 异构的对象引用列表</li><li>[] - 一个空列表</li></ul><h2 id="Groovy映射"><a href="#Groovy映射" class="headerlink" title="Groovy映射"></a>Groovy映射</h2><p>映射（也称为关联数组，字典，表和散列）是对象引用的无序集合。Map集合中的元素由键值访问。 Map中使用的键可以是任何类。当我们插入到Map集合中时，需要两个值：键和值。</p><p>以下是一些映射的例子 - </p><ul><li>[‘TopicName’：’Lists’，’TopicName’：’Maps’] - 具有TopicName作为键的键值对的集合及其相应的值。</li><li>[：] - 空映射。</li></ul><p>在本章中，我们将讨论Groovy中可用的映射方法。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> aMap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'TopicName'</span><span class="token punctuation">:</span><span class="token string">'Lists'</span><span class="token punctuation">,</span><span class="token string">'TopicName2'</span><span class="token punctuation">:</span><span class="token string">'Maps'</span><span class="token punctuation">]</span>aMap<span class="token operator">.</span>each <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    key<span class="token punctuation">,</span>value <span class="token operator">-></span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = $key"</span> <span class="token operator">+</span> <span class="token string">"value = $value"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Groovy正则表达式"><a href="#Groovy正则表达式" class="headerlink" title="Groovy正则表达式"></a>Groovy正则表达式</h1><p>正则表达式是用于在文本中查找子字符串的模式。 Groovy使用〜“regex”表达式本地支持正则表达式。引号中包含的文本表示用于比较的表达式。</p><p>例如，我们可以创建一个正则表达式对象，如下所示 - </p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> regex <span class="token operator">=</span> <span class="token operator">~</span><span class="token string">'Groovy'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当Groovy运算符=〜在if和while语句（见第8章）中作为谓词（返回布尔值的表达式）出现时，左侧的String操作数与右侧的正则表达式操作数匹配。因此，以下每个都传递值true。</p><p>当定义正则表达式时，可以使用以下特殊字符</p><ul><li>有两个特殊的位置字符用于表示一行的开始和结束：caret（∧）和美元符号（$）。</li><li>正则表达式也可以包括量词。加号（+）表示一次或多次，应用于表达式的前一个元素。星号（*）用于表示零个或多个出现。问号（？）表示零或一次。</li><li>元字符{和}用于匹配前一个字符的特定数量的实例。</li><li>在正则表达式中，句点符号（。）可以表示任何字符。这被描述为通配符。</li><li>正则表达式可以包括字符类。一组字符可以作为简单的字符序列，包含在元字符[和]中，如[aeiou]中。对于字母或数字范围，可以使用[a-z]或[a-mA-M]中的短划线分隔符。字符类的补码由方括号内的前导插入符号表示，如[∧a-z]中所示，并表示除指定的字符以外的所有字符。</li></ul><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token string">'Groovy'</span> <span class="token operator">=~</span> <span class="token string">'Groovy'</span> <span class="token string">'Groovy'</span> <span class="token operator">=~</span> <span class="token string">'oo'</span> <span class="token string">'Groovy'</span> <span class="token operator">==~</span> <span class="token string">'Groovy'</span> <span class="token string">'Groovy'</span> <span class="token operator">==~</span> <span class="token string">'oo'</span> <span class="token string">'Groovy'</span> <span class="token operator">=~</span> <span class="token string">'∧G'</span> ‘Groovy<span class="token string">' =~ '</span>G<span class="token punctuation">$</span>' ‘Groovy<span class="token string">' =~ '</span>Gro<span class="token operator">*</span>vy<span class="token string">' '</span>Groovy<span class="token string">' =~ '</span>Gro<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>vy'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> regex <span class="token operator">=</span> <span class="token operator">~</span><span class="token string">'groovy'</span><span class="token function">println</span> <span class="token punctuation">(</span><span class="token string">"groovy"</span><span class="token operator">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><pre class="line-numbers language-Groovy"><code class="language-Groovy">class Empire&#123;    private String name //必须制定getter和setter，因为是private的    int age //提供默认的getter 和setter    Empire(String name,int age)&#123;        this.name = name        this.age = age    &#125;    def getName()&#123;        return name    &#125;&#125;Empire empire = new Empire("China",5000)println empire.getName() //属性getterprintln empire.name  //属性println empire.age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="继承-amp-扩展"><a href="#继承-amp-扩展" class="headerlink" title="继承&amp;扩展"></a>继承&amp;扩展</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">interface</span> <span class="token class-name">FLY</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name    <span class="token keyword">private</span> String category    <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String category<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token operator">.</span>category <span class="token operator">=</span> category    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    String <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> category    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">.</span>name <span class="token operator">=</span> name    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setCategory</span><span class="token punctuation">(</span>String category<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">.</span>category <span class="token operator">=</span> category    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dove</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">FLY</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">Dove</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String category<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> category<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println <span class="token string">"I believe i can fly"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Dove d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dove</span><span class="token punctuation">(</span><span class="token string">"Dove"</span><span class="token punctuation">,</span><span class="token string">"Bird"</span><span class="token punctuation">)</span>println d<span class="token operator">.</span>nameprintln d<span class="token operator">.</span>category d<span class="token operator">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Dove f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dove</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>f<span class="token operator">.</span>name <span class="token operator">=</span> <span class="token string">"lala"</span>f<span class="token operator">.</span>category <span class="token operator">=</span> <span class="token string">"prettyBird"</span>println f<span class="token operator">.</span>nameprintln f<span class="token operator">.</span>category<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>下面是一个外部和内部类的例子。在下面的例子中，我们做了以下事情 - </p><ul><li>创建一个名为Outer的类，它将是我们的外部类。</li><li>在Outer类中定义名为name的字符串。</li><li>在我们的外类中创建一个内部或嵌套类。</li><li>请注意，在内部类中，我们可以访问在Outer类中定义的名称实例成员。</li></ul><blockquote><p>其实Groovy中的内部类和Java中的是一样的</p></blockquote><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>同上</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ABTest</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AB</span> <span class="token keyword">extends</span> <span class="token class-name">ABTest</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口定义了类需要遵守的契约。接口仅定义需要实现的方法的列表，但是不定义方法实现。需要使用interface关键字声明接口。接口仅定义方法签名。接口的方法总是公开的。在接口中使用受保护或私有方法是一个错误。</p><h1 id="Groovy-泛型"><a href="#Groovy-泛型" class="headerlink" title="Groovy 泛型"></a>Groovy 泛型</h1><p>可以参考Java的泛型，他们是一样的。（因为Groovy也是基于JVM）</p><h1 id="Groovy特征"><a href="#Groovy特征" class="headerlink" title="Groovy特征"></a>Groovy特征</h1><p>特征是语言的结构构造，允许 - </p><ul><li>行为的组成。</li><li>接口的运行时实现。</li><li>与静态类型检查/编译的兼容性</li></ul><p>它们可以被看作是承载默认实现和状态的接口。使用trait关键字定义trait。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">trait</span> <span class="token class-name">SwimmingAbility</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println <span class="token string">"$&amp;#123;this.class&amp;#125; is swimming"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">trait</span> <span class="token class-name">FlyingAbility</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println <span class="token string">"$&amp;#123;this.class&amp;#125; is flying"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Eat</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token keyword">implements</span> <span class="token class-name">SwimmingAbility</span> <span class="token punctuation">,</span>FlyingAbility<span class="token punctuation">,</span>Eat<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Duck d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token operator">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token operator">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">trait</span> <span class="token class-name">Name</span> <span class="token keyword">implements</span> <span class="token class-name">FlyingAbility</span><span class="token punctuation">,</span> SwimmingAbility<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name    <span class="token keyword">abstract</span> <span class="token keyword">def</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Name</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">def</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println Name__name    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.解决钻石问题（多重继承引发的歧义问题），同时能够实现多重继承的好处</span><span class="token comment" spellcheck="true">//2.对trait的理解就是嵌入实现类中，而不是继承的那种上下文的关系</span>Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token operator">.</span>Name__name <span class="token operator">=</span> <span class="token string">"hefuduo"</span>p<span class="token operator">.</span>name <span class="token operator">=</span> <span class="token string">"LeoHe"</span>p<span class="token operator">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token operator">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    str<span class="token operator">?.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println <span class="token function">foo</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##实现接口</p><p>Traits可以实现接口，在这种情况下，使用implements关键字声明接口。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>特征可以定义属性。下面给出了具有属性的trait的示例。</p><p>在以下示例中，integer类型的Marks1是一个属性。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Student st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      st<span class="token operator">.</span>StudentID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token function">println</span><span class="token punctuation">(</span>st<span class="token operator">.</span><span class="token function">DisplayMarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">println</span><span class="token punctuation">(</span>st<span class="token operator">.</span><span class="token function">DisplayTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">interface</span> <span class="token class-name">Total</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">void</span> <span class="token function">DisplayTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">trait</span> <span class="token class-name">Marks</span> <span class="token keyword">implements</span> <span class="token class-name">Total</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> Marks1<span class="token punctuation">;</span>              <span class="token keyword">void</span> <span class="token function">DisplayMarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token operator">.</span>Marks1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">.</span>Marks1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>              <span class="token keyword">void</span> <span class="token function">DisplayTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Display Total"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Marks</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> StudentID    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="行为的构成"><a href="#行为的构成" class="headerlink" title="行为的构成"></a>行为的构成</h2><p>特征可以用于以受控的方式实现多重继承，避免钻石问题。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">trait</span> <span class="token class-name">Name</span> <span class="token keyword">implements</span> <span class="token class-name">FlyingAbility</span><span class="token punctuation">,</span> SwimmingAbility<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name    <span class="token keyword">abstract</span> <span class="token keyword">def</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Name</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">def</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println Name__name    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.解决钻石问题（多重继承引发的歧义问题），同时能够实现多重继承的好处</span><span class="token comment" spellcheck="true">//2.对trait的理解就是嵌入实现类中，而不是继承的那种上下文的关系</span>Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token operator">.</span>Name__name <span class="token operator">=</span> <span class="token string">"hefuduo"</span>p<span class="token operator">.</span>name <span class="token operator">=</span> <span class="token string">"LeoHe"</span>p<span class="token operator">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token operator">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Groovy闭包"><a href="#Groovy闭包" class="headerlink" title="Groovy闭包"></a>Groovy闭包</h1><p>闭包是一个短的匿名代码块。它通常跨越几行代码。一个方法甚至可以将代码块作为参数。它们是匿名的。</p><p>下面是一个简单闭包的例子，它是什么样子。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> close <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println <span class="token string">"hello groovy"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>close<span class="token operator">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包中的形式参数"><a href="#闭包中的形式参数" class="headerlink" title="闭包中的形式参数"></a>闭包中的形式参数</h2><p>闭包也可以包含形式参数，以使它们更有用，就像Groovy中的方法一样。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> closure <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    suffix <span class="token operator">-></span>     println <span class="token string">"hello $suffix"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果不写参数suffix，默认的提供一个叫it的参数</span>closure<span class="token operator">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包和变量"><a href="#闭包和变量" class="headerlink" title="闭包和变量"></a>闭包和变量</h2><p>更正式地，闭包可以在定义闭包时引用变量。以下是如何实现这一点的示例。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> closure <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    param <span class="token operator">-></span>         println param<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">def</span> <span class="token function">fin</span><span class="token punctuation">(</span>String logan<span class="token punctuation">,</span>Closure s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    s<span class="token operator">.</span><span class="token function">call</span><span class="token punctuation">(</span>logan<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fin</span><span class="token punctuation">(</span><span class="token string">"hefuduo"</span><span class="token punctuation">,</span>closure<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合和字符串中的闭包"><a href="#集合和字符串中的闭包" class="headerlink" title="集合和字符串中的闭包"></a>集合和字符串中的闭包</h2><p>几个List，Map和String方法接受一个闭包作为参数。让我们看看在这些数据类型中如何使用闭包的例子。</p><h3 id="使用闭包和列表"><a href="#使用闭包和列表" class="headerlink" title="使用闭包和列表"></a>使用闭包和列表</h3><p>以下示例显示如何使用闭包与列表。在下面的例子中，我们首先定义一个简单的值列表。列表集合类型然后定义一个名为.each的函数。此函数将闭包作为参数，并将闭包应用于列表的每个元素</p><h3 id="使用映射闭包"><a href="#使用映射闭包" class="headerlink" title="使用映射闭包"></a>使用映射闭包</h3><p>以下示例显示了如何使用闭包。在下面的例子中，我们首先定义一个简单的关键值项Map。然后，映射集合类型定义一个名为.each的函数。此函数将闭包作为参数，并将闭包应用于映射的每个键值对。</p><h1 id="Groovy注解"><a href="#Groovy注解" class="headerlink" title="Groovy注解"></a>Groovy注解</h1><p>注释是元数据的形式，其中它们提供关于不是程序本身的一部分的程序的数据。注释对它们注释的代码的操作没有直接影响。</p><p>注释主要用于以下原因 - </p><ul><li><strong>编译器信息</strong> -编译器可以使用注释来检测错误或抑制警告。</li><li><strong>编译时和部署时处理</strong> -软件工具可以处理注释信息以生成代码，XML文件等。</li><li><strong>运行时处理</strong> -一些注释可以在运行时检查。</li></ul><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><pre class="line-numbers language-groovy"><code class="language-groovy">@<span class="token keyword">interface</span> <span class="token class-name">Simple</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String <span class="token function">str1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hi"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">enum</span> DayOfWeek<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Sat<span class="token punctuation">,</span> Sun<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>@<span class="token keyword">interface</span> <span class="token class-name">Scheduled</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    DayOfWeek <span class="token function">dayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h2><pre class="line-numbers language-groovy"><code class="language-groovy">@<span class="token keyword">interface</span> <span class="token class-name">Simple</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Simple</span>Class <span class="token class-name">User</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注释成员值"><a href="#注释成员值" class="headerlink" title="注释成员值"></a>注释成员值</h2><p>使用注释时，需要至少设置所有没有默认值的成员。下面给出一个例子。当定义后使用注释示例时，需要为其分配一个值。</p><h2 id="关闭注释参数"><a href="#关闭注释参数" class="headerlink" title="关闭注释参数"></a>关闭注释参数</h2><p>Groovy中注释的一个很好的特性是，你也可以使用闭包作为注释值。因此，注释可以与各种各样的表达式一起使用。</p><p>下面给出一个例子。注释Onlyif是基于类值创建的。然后注释应用于两个方法，它们基于数字变量的值向结果变量发布不同的消息。</p><pre class="line-numbers language-groovy"><code class="language-groovy">@<span class="token keyword">interface</span> <span class="token class-name">OnlyIf</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   Class <span class="token class-name">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@OnlyIf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> number<span class="token operator">&lt;=</span><span class="token number">6</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">Version6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   result <span class="token operator">&lt;&lt;</span> <span class="token string">'Number greater than 6'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token annotation punctuation">@OnlyIf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> number<span class="token operator">>=</span><span class="token number">6</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">Version7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   result <span class="token operator">&lt;&lt;</span> <span class="token string">'Number greater than 6'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元注释"><a href="#元注释" class="headerlink" title="元注释"></a>元注释</h2><p>这是groovy中注释的一个非常有用的功能。有时可能有一个方法的多个注释，如下所示。有时这可能变得麻烦有多个注释。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token annotation punctuation">@Procedure</span> <span class="token annotation punctuation">@Master</span> <span class="token keyword">class</span> <span class="token class-name">MyMasterProcedure</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这种情况下，您可以定义一个元注释，它将多个注释集中在一起，并将元注释应用于该方法。所以对于上面的例子，你可以使用AnnotationCollector来定义注释的集合。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">import</span> groovy<span class="token operator">.</span>transform<span class="token operator">.</span>AnnotationCollector  <span class="token annotation punctuation">@Procedure</span> <span class="token annotation punctuation">@Master</span> <span class="token annotation punctuation">@AnnotationCollector</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一旦完成，您可以应用以下元注释器到该方法 - </p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">import</span> groovy<span class="token operator">.</span>transform<span class="token operator">.</span>AnnotationCollector  <span class="token annotation punctuation">@Procedure</span> <span class="token annotation punctuation">@Master</span> <span class="token annotation punctuation">@AnnotationCollector</span>  <span class="token annotation punctuation">@MasterProcedure</span> <span class="token keyword">class</span> <span class="token class-name">MyMasterProcedure</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Groovy-XML"><a href="#Groovy-XML" class="headerlink" title="Groovy XML"></a>Groovy XML</h1><h2 id="XML-生成"><a href="#XML-生成" class="headerlink" title="XML 生成"></a>XML 生成</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">import</span> groovy<span class="token operator">.</span>xml<span class="token operator">.</span>MarkupBuilder<span class="token keyword">def</span> mB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MarkupBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Compose the builder</span>mB<span class="token operator">.</span><span class="token function">collection</span><span class="token punctuation">(</span>shelf<span class="token punctuation">:</span> <span class="token string">'New Arrivals'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">movie</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string">'Enemy Behind'</span><span class="token punctuation">)</span>    <span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'War, Thriller'</span><span class="token punctuation">)</span>    <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'DVD'</span><span class="token punctuation">)</span>    <span class="token function">year</span><span class="token punctuation">(</span><span class="token string">'2003'</span><span class="token punctuation">)</span>    <span class="token function">rating</span><span class="token punctuation">(</span><span class="token string">'PG'</span><span class="token punctuation">)</span>    <span class="token function">stars</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">description</span><span class="token punctuation">(</span><span class="token string">'Talk about a US-Japan war'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>mB<span class="token operator">.</span><span class="token function">Html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span>ref <span class="token punctuation">:</span> <span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span>    body<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">h1</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h2><p>Groovy XmlParser类使用一个简单的模型来将XML文档解析为Node实例的树。每个节点都有XML元素的名称，元素的属性和对任何子节点的引用。这个模型足够用于大多数简单的XML处理。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">shelf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>New Arrivals<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>movie</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Enemy Behind<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>War, Thriller<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>format</span><span class="token punctuation">></span></span>DVD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>format</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>2003<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rating</span><span class="token punctuation">></span></span>PG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rating</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stars</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stars</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Talk about a US-Japan war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>movie</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>movie</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Transformers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>Anime, Science Fiction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>format</span><span class="token punctuation">></span></span>DVD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>format</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>1989<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rating</span><span class="token punctuation">></span></span>R<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rating</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stars</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stars</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>A schientific fiction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>movie</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>movie</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Trigun<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>Anime, Action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>format</span><span class="token punctuation">></span></span>DVD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>format</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>1986<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rating</span><span class="token punctuation">></span></span>PG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rating</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stars</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stars</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Vash the Stam pede!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>movie</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>movie</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Ishtar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>Comedy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>format</span><span class="token punctuation">></span></span>VHS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>format</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>1987<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rating</span><span class="token punctuation">></span></span>PG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rating</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stars</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stars</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Viewable boredom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>movie</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析代码</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> doc <span class="token operator">=</span> parser<span class="token operator">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"assets/movies.xml"</span><span class="token punctuation">)</span>doc<span class="token operator">.</span>movie<span class="token operator">.</span>each <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    bk <span class="token operator">-></span>        print <span class="token string">"Movie Name : "</span>        println <span class="token string">"$&amp;#123;bk['@title']&amp;#125;"</span>        print <span class="token string">"Movie Type : "</span>        println <span class="token string">"$&amp;#123;bk.type[0].text()&amp;#125;"</span>        print <span class="token string">"Movie Format : "</span>        println <span class="token string">"$&amp;#123;bk.format[0].text()&amp;#125;"</span>        print <span class="token string">"Movie year : "</span>        println <span class="token string">"$&amp;#123;bk.year[0].text()&amp;#125;"</span>        print <span class="token string">"Rating : "</span>        println <span class="token string">"$&amp;#123;bk.rating[0].text()&amp;#125;"</span>        print <span class="token string">"Starts : "</span>        println <span class="token string">"$&amp;#123;bk.stars[0].text()&amp;#125;"</span>        print <span class="token string">"Description : "</span>        println <span class="token string">"$&amp;#123;bk.description[0].text()&amp;#125;"</span>        println <span class="token string">"============================="</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重要的事情需要注意上面的代码。</p><ul><li>正在形成类XmlParser的对象，以便它可以用于解析XML文档。</li><li>解析器被给定XML文件的位置。</li><li>对于每个电影元素，我们使用闭包浏览每个子节点并显示相关信息。</li></ul><p>对于movie元素本身，我们使用@符号显示附加到movie元素的title属性。</p><h1 id="Groovy-JMX"><a href="#Groovy-JMX" class="headerlink" title="Groovy JMX"></a>Groovy JMX</h1><p>JMX 用于监控与Java虚拟机环境有任何关系的所有应用程序。</p><h2 id="监视JVM"><a href="#监视JVM" class="headerlink" title="监视JVM"></a>监视JVM</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">import</span> java<span class="token operator">.</span>lang<span class="token operator">.</span>management<span class="token operator">.</span><span class="token operator">*</span><span class="token keyword">def</span> os <span class="token operator">=</span> ManagementFactory<span class="token operator">.</span>operatingSystemMXBeanprintln <span class="token string">"""OPERATING SYSTEM:     OS architecture = $os.arch     OS name = $os.name     OS version = $os.version     OS processors = $os.availableProcessors """</span><span class="token keyword">def</span> rt <span class="token operator">=</span> ManagementFactory<span class="token operator">.</span>runtimeMXBeanprintln <span class="token string">"""RUNTIME:        Runtime name = $rt.name        Runtime spec name = $rt.specName        Runtime vendor = $rt.specVendor        Runtime spec version = $rt.specVersion        Runtime management spec version = $rt.managementSpecVersion    """</span><span class="token keyword">def</span> mem <span class="token operator">=</span> ManagementFactory<span class="token operator">.</span>memoryMXBean<span class="token keyword">def</span> heapUsage <span class="token operator">=</span> mem<span class="token operator">.</span>heapMemoryUsage<span class="token keyword">def</span> nonHeapUsage <span class="token operator">=</span> mem<span class="token operator">.</span>nonHeapMemoryUsageprintln <span class="token string">"""MEMORY:    HEAP STORAGE:           Memory committed = $heapUsage.committed           Memory init = $heapUsage.init           Memory max = $heapUsage.max           Memory used = $heapUsage.used NON-HEAP STORAGE:           Non-heap memory committed = $nonHeapUsage.committed           Non-heap memory init = $nonHeapUsage.init           Non-heap memory max = $nonHeapUsage.max           Non-heap memory used = $nonHeapUsage.used    """</span>println <span class="token string">"GARBAGE COLLECTION:"</span>ManagementFactory<span class="token operator">.</span>garbageCollectorMXBeans<span class="token operator">.</span>each <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> gc <span class="token operator">-></span>    println <span class="token string">"    name = $gc.name"</span>    println <span class="token string">"        collection count = $gc.collectionCount"</span>    println <span class="token string">"        collection time = $gc.collectionTime"</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> mpoolNames <span class="token operator">=</span>   gc<span class="token operator">.</span>memoryPoolNames    mpoolNames<span class="token operator">.</span>each <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        mpoolName <span class="token operator">-></span> println <span class="token string">"        mpool name = $mpoolName"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Groovy-JSON"><a href="#Groovy-JSON" class="headerlink" title="Groovy JSON"></a>Groovy JSON</h2><h2 id="JSON功能"><a href="#JSON功能" class="headerlink" title="JSON功能"></a>JSON功能</h2><table><thead><tr><th>功能</th><th>库</th></tr></thead><tbody><tr><td>JsonSlurper</td><td>JsonSlurper是一个将JSON文本或阅读器内容解析为Groovy数据的类结构，例如地图，列表和原始类型，如整数，双精度，布尔和字符串。</td></tr><tr><td>JsonOutput</td><td>此方法负责将Groovy对象序列化为JSON字符串。</td></tr></tbody></table><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">import</span> groovy<span class="token operator">.</span>json<span class="token operator">.</span>JsonSlurper<span class="token keyword">def</span> slurper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonSlurper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> obj <span class="token operator">=</span> slurper<span class="token operator">.</span><span class="token function">parseText</span><span class="token punctuation">(</span><span class="token string">'&amp;#123;"name":"John","id":"1"&amp;#125;'</span><span class="token punctuation">)</span>println obj<span class="token operator">.</span>nameprintln obj<span class="token operator">.</span>id<span class="token keyword">def</span> lst <span class="token operator">=</span> slurper<span class="token operator">.</span><span class="token function">parseText</span><span class="token punctuation">(</span><span class="token string">'&amp;#123;"List" : [2,3,4,5]&amp;#125;'</span><span class="token punctuation">)</span>lst<span class="token operator">.</span>each <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    key<span class="token punctuation">,</span> value <span class="token operator">-></span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"$key = $value"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">import</span> groovy<span class="token operator">.</span>json<span class="token operator">.</span>JsonOutput<span class="token keyword">def</span> jsonOuter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>map<span class="token operator">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"hefuduo"</span><span class="token punctuation">)</span>map<span class="token operator">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span>map<span class="token operator">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>String json <span class="token operator">=</span> jsonOuter<span class="token operator">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>println json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Groovy-DLS"><a href="#Groovy-DLS" class="headerlink" title="Groovy DLS"></a>Groovy DLS</h1><p>Groovy允许在顶层语句的方法调用的参数周围省略括号。这被称为“命令链”功能。这个扩展的工作原理是允许一个人链接这种无括号的方法调用，在参数周围不需要括号，也不需要链接调用之间的点。</p><p>如果一个调用被执行为bcd，这将实际上等价于a（b）.c（d）。</p><p>DSL或域特定语言旨在简化以Groovy编写的代码，使得它对于普通用户变得容易理解。以下示例显示了具有域特定语言的确切含义。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">EmailDSL</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String toText    String fromText    String body        <span class="token keyword">def</span> <span class="token keyword">static</span> <span class="token function">make</span><span class="token punctuation">(</span>Closure closure<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        EmailDSL dsl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmailDSL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        closure<span class="token operator">.</span>delegate <span class="token operator">=</span> dsl        closure<span class="token operator">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> <span class="token function">to</span><span class="token punctuation">(</span>String toText<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">.</span>toText <span class="token operator">=</span> toText    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> <span class="token function">from</span><span class="token punctuation">(</span>String fromText<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">.</span>fromText <span class="token operator">=</span> fromText    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">def</span> <span class="token function">body</span><span class="token punctuation">(</span>String bodyText<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">.</span>body <span class="token operator">=</span> bodyText    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> send<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>send<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            println <span class="token string">"From $fromText To $toText : $body"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>EmailDSL<span class="token operator">.</span>make <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    to <span class="token string">"James"</span>    from <span class="token string">"Leo"</span>    body <span class="token string">"How is everything going on"</span>    send <span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用接受闭包的静态方法。这是一个很麻烦的方式来实现DSL。</li><li>在电子邮件示例中，类EmailDsl具有make方法。它创建一个实例，并将闭包中的所有调用委派给实例。这是一种机制，其中“to”和“from”节结束了EmailDsl类中的执行方法。</li><li>一旦to（）方法被调用，我们将文本存储在实例中以便以后格式化。</li><li>我们现在可以使用易于为最终用户理解的简单语言调用EmailDSL方法。</li></ul><h1 id="Groovy-模板引擎"><a href="#Groovy-模板引擎" class="headerlink" title="Groovy 模板引擎"></a>Groovy 模板引擎</h1><h2 id="字符串中的简单模板"><a href="#字符串中的简单模板" class="headerlink" title="字符串中的简单模板"></a>字符串中的简单模板</h2><p>如果你采用下面的简单例子，我们首先定义一个名称变量来保存字符串“Groovy”。在println语句中，我们使用$符号来定义可以插入值的参数或模板。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> name <span class="token operator">=</span> <span class="token string">"Groovy"</span> println <span class="token string">"This Tutorial is about $&amp;#123;name&amp;#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果上面的代码在groovy中执行，将显示以下输出。输出清楚地显示$名称被由def语句分配的值替换</p><h2 id="简单模板引擎"><a href="#简单模板引擎" class="headerlink" title="简单模板引擎"></a>简单模板引擎</h2><p>以下是SimpleTemplateEngine的示例，它允许您在模板中使用类似于JSP的scriptlet和EL表达式，以生成参数化文本。模板引擎允许绑定参数列表及其值，以便可以在具有定义的占位符的字符串中替换它们。</p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">def</span> text <span class="token operator">=</span>'This Tutorial focuses on <span class="token punctuation">$</span>TutorialName<span class="token operator">.</span> In <span class="token keyword">this</span> tutorial you will learn about <span class="token punctuation">$</span>Topic'  <span class="token keyword">def</span> binding <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"TutorialName"</span><span class="token punctuation">:</span><span class="token string">"Groovy"</span><span class="token punctuation">,</span> <span class="token string">"Topic"</span><span class="token punctuation">:</span><span class="token string">"Templates"</span><span class="token punctuation">]</span>  <span class="token keyword">def</span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">groovy<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> template <span class="token operator">=</span> engine<span class="token operator">.</span><span class="token function">createTemplate</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">make</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span> println template<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果上面的代码在groovy中执行，将显示以下输出。</p><p>现在让我们使用XML文件的模板功能。作为第一步，让我们将下面的代码添加到一个名为Student.template的文件中。在以下文件中，您将注意到，我们尚未添加元素的实际值，而是添加占位符。所以$ name，$ is和$ subject都被放置为占位符，需要在运行时替换。</p><pre><code>&lt;Student&gt;    &lt;name&gt;$&#123;name&#125;&lt;/name&gt;    &lt;ID&gt;$&#123;id&#125;&lt;/ID&gt;    &lt;subject&gt;$&#123;subject&#125;&lt;/subject&gt; &lt;/Student&gt;</code></pre><p>现在，让我们添加我们的Groovy脚本代码来添加功能，可以使用实际值替换上面的模板。应该注意以下事项关于以下代码。</p><ul><li>占位符到实际值的映射通过绑定和SimpleTemplateEngine完成。绑定是一个映射，占位符作为键，替换值作为值。</li></ul><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">import</span> groovy<span class="token operator">.</span>text<span class="token operator">.</span><span class="token operator">*</span> <span class="token keyword">import</span> java<span class="token operator">.</span>io<span class="token operator">.</span><span class="token operator">*</span> <span class="token keyword">def</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/Student.template"</span><span class="token punctuation">)</span> <span class="token keyword">def</span> binding <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'id'</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'subject'</span> <span class="token punctuation">:</span> <span class="token string">'Physics'</span><span class="token punctuation">]</span>                  <span class="token keyword">def</span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> template <span class="token operator">=</span> engine<span class="token operator">.</span><span class="token function">createTemplate</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token keyword">def</span> writable <span class="token operator">=</span> template<span class="token operator">.</span><span class="token function">make</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span> println writable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果上面的代码在groovy中执行，将显示以下输出。从输出中可以看出，在相关占位符中成功替换了值。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Joe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ID</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ID</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>subject</span><span class="token punctuation">></span></span>Physics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>subject</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Student</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Groovy-元对象编程"><a href="#Groovy-元对象编程" class="headerlink" title="Groovy 元对象编程"></a>Groovy 元对象编程</h1><p>元对象编程或MOP可以用于动态调用方法，并且可以即时创建类和方法。</p><p>那么这是什么意思呢？让我们考虑一个叫Student的类，它是一个没有成员变量或方法的空类。假设你必须在这个类上调用以下语句。</p><pre class="line-numbers language-groovy"><code class="language-groovy">Def myStudent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> myStudent<span class="token operator">.</span>Name <span class="token operator">=</span> ”Joe”<span class="token punctuation">;</span> myStudent<span class="token operator">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在在元对象编程中，即使类没有成员变量Name或方法Display（），上面的代码仍然可以工作。</p><p>这如何工作？那么，为了这个工作，一个人必须实现GroovyInterceptable接口挂钩到Groovy的执行过程。以下是该接口的可用方法。</p><pre class="line-numbers language-groovy"><code class="language-groovy">Public <span class="token keyword">interface</span> <span class="token class-name">GroovyInterceptable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Public object <span class="token function">invokeMethod</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">,</span> Object args<span class="token punctuation">)</span>    Public object <span class="token function">getproperty</span><span class="token punctuation">(</span>String propertyName<span class="token punctuation">)</span>    Public object <span class="token function">setProperty</span><span class="token punctuation">(</span>String propertyName<span class="token punctuation">,</span> Object newValue<span class="token punctuation">)</span>    Public MetaClass <span class="token function">getMetaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    Public <span class="token keyword">void</span> <span class="token function">setMetaClass</span><span class="token punctuation">(</span>MetaClass metaClass<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以在上面的接口描述中，假设你必须实现invokeMethod（），它会被调用的每个方法，要么存在或不存在。</p><h2 id="缺失属性"><a href="#缺失属性" class="headerlink" title="缺失属性"></a>缺失属性</h2><p>所以，让我们看一个例子，我们如何为缺失的属性实现元对象编程。以下键应该注意以下代码。</p><ul><li>类Student没有定义名为Name或ID的成员变量。</li><li>类Student实现GroovyInterceptable接口。</li><li>有一个称为dynamicProps的参数，将用于保存即时创建的成员变量的值。</li><li>方法getproperty和setproperty已被实现以在运行时获取和设置类的属性的值。</li></ul><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Student mst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mst<span class="token operator">.</span>Name <span class="token operator">=</span> <span class="token string">"Joe"</span><span class="token punctuation">;</span>      mst<span class="token operator">.</span>ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token function">println</span><span class="token punctuation">(</span>mst<span class="token operator">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">println</span><span class="token punctuation">(</span>mst<span class="token operator">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">GroovyInterceptable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> dynamicProps<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>       <span class="token keyword">void</span> <span class="token function">setProperty</span><span class="token punctuation">(</span>String pName<span class="token punctuation">,</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      dynamicProps<span class="token punctuation">[</span>pName<span class="token punctuation">]</span> <span class="token operator">=</span> val   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">def</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>String pName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      dynamicProps<span class="token punctuation">[</span>pName<span class="token punctuation">]</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下代码的输出将是 - </p><pre><code>Joe 1</code></pre><h2 id="缺失方法"><a href="#缺失方法" class="headerlink" title="缺失方法"></a>缺失方法</h2><p>所以，让我们看一个例子，我们如何为缺失的属性实现元对象编程。以下键应该注意下面的代码 - </p><ul><li>类学生现在实现invokeMethod方法，它被调用，而不管该方法是否存在。</li></ul><pre><code>class Example &#123;   static void main(String[] args) &#123;      Student mst = new Student();      mst.Name = &quot;Joe&quot;;      mst.ID = 1;              println(mst.Name);      println(mst.ID);      mst.AddMarks();   &#125; &#125; class Student implements GroovyInterceptable &#123;   protected dynamicProps = [:]         void setProperty(String pName, val) &#123;      dynamicProps[pName] = val   &#125;       def getProperty(String pName) &#123;      dynamicProps[pName]   &#125;      def invokeMethod(String name, Object args) &#123;      return &quot;called invokeMethod $name $args&quot;   &#125;&#125;</code></pre><p>以下代码的输出如下所示。请注意，即使方法Display不存在，也没有缺少方法异常的错误。</p><pre><code>Joe 1 </code></pre><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型的拓展</title>
      <link href="/2017/06/27/2017-06-27-Java%E6%B3%9B%E5%9E%8B%E6%8B%93%E5%B1%95-2017/"/>
      <url>/2017/06/27/2017-06-27-Java%E6%B3%9B%E5%9E%8B%E6%8B%93%E5%B1%95-2017/</url>
      
        <content type="html"><![CDATA[<h1 id="Java泛型拓展"><a href="#Java泛型拓展" class="headerlink" title="Java泛型拓展"></a>Java泛型拓展</h1><h2 id="基础知识之协变与逆变"><a href="#基础知识之协变与逆变" class="headerlink" title="基础知识之协变与逆变"></a>基础知识之协变与逆变</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// public final class Integer extends Number  </span>Number num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Number<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ArrayList<span class="token operator">&lt;</span>Number<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//type mismatch 这两个根本就不是一个类型 </span>  List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//error  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么<code>Number</code>的对象可以由<code>Integer</code>实例化，而<code>ArrayList&lt;Number&gt;</code>的对象却不能由<code>ArrayList&lt;Integer&gt;</code>实例化？<code>List</code>中的<code>&lt;? extends Number&gt;</code>声明其元素是<code>Number</code>或<code>Number的派生类</code>，为什么不能<code>add Integer</code>?为了解决这些问题，需要了解Java中的逆变和协变以及泛型中通配符用法。</p><p>​       Java中<code>String</code>类型是继承自<code>Object</code>的，姑且记做<code>String ≦ Object</code>，表示String是Object的子类型，String的对象可以赋给Object的对象。而Object的数组类型Object[]，理解成是由Object构造出来的一种新的类型,可以认为是一种构造类型，记f(Object)，那么可以这么来描述协变和逆变：</p><p>​       <code>当A ≦ B时,如果有f(A) ≦ f(B),那么f叫做协变；</code></p><p>​       <code>当A ≦ B时,如果有f(B) ≦ f(A),那么f叫做逆变；</code></p><p>​       <code>如果上面两种关系都不成立则叫做不可变。</code></p><p> JAVA中泛型是不变的，可有时需要实现逆变与协变，怎么办呢？这时就需要通配符<code>?</code>。</p><span id="more"></span><h3 id="协变"><a href="#协变" class="headerlink" title="协变"></a>协变</h3><p><code>&lt;? extends Number&gt;</code>实现了Java中的协变</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ·<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;? extends Number&gt;</code>表示通配符<code>?</code>的上界为<code>Number</code>，即“<code>? extends Number</code>”可以代表<code>Number</code>或其子类，但代表不了<code>Number</code>的父类（如<code>Object</code>），因为通配符的上界是<code>Number</code>。</p><p>于是有<code>? extends Number ≦ Number</code>，则<code>List&lt;? extends Number&gt; ≦ List&lt; Number &gt;</code>。那么就有：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list001 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list002 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Float<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 但是这里不能向<code>list001、list002</code>添加除<code>null</code>以外的任意对象。可以这样理解一下，<code>List&lt;Integer&gt;</code>可以添加<code>Interger</code>及其子类，<code>List&lt;Float&gt;</code>可以添加<code>Float</code>及其子类，<code>List&lt;Integer&gt;、List&lt;Float&gt;</code>都是<code>List&lt;? extends Animal&gt;</code>的子类型，如果能将<code>Float</code>的子类添加到<code>List&lt;? extends Animal&gt;</code>中，就说明<code>Float</code>的子类也是可以添加到<code>List&lt;Integer&gt;</code>中的，显然是不可行。故java为了保护其类型一致，禁止向<code>List&lt;? extends Number&gt;</code>添加任意对象，不过却可以添加<code>null</code>。</p><h3 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a>逆变</h3><p> <code> &lt;? super&gt;</code>实现了泛型的逆变，比如：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Number<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <code>? super Number</code> 则表示通配符<code>?</code>的下界为<code>Number</code>。为了保护类型的一致性，因为<code>？ super Number</code>可以是<code>Object</code>或其他<code>Number</code>的父类，因无法确定其类型，也就不能往<code>List&lt;? super Number &gt;</code>添加<code>Number</code>的任意父类对象。但是可以向<code>List&lt;? super Number&gt;添加Number</code>及其子类。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Number<span class="token operator">></span> list001 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Number<span class="token operator">></span> list002 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list001<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list002<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PECS"><a href="#PECS" class="headerlink" title="PECS"></a>PECS</h3><blockquote><p>现在问题来了：究竟什么时候用extends什么时候用super呢？《Effective Java》给出了答案：</p></blockquote><p>PECS: producer-extends, consumer-super. </p><p>PECS指“Producer Extends，Consumer Super”。换句话说，如果参数化类型表示一个生产者，就使用<code>&lt;? extends T&gt;</code>；如果它表示一个消费者，就使用<code>&lt;? super T&gt;</code>。</p><p>比如一个Stack API</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token operator">:</span>      <span class="token keyword">public</span> E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要实现<code>pushAll(Iterable&lt;E&gt; src)</code>方法，将src的元素逐一入栈：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushAll</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span>E<span class="token operator">></span> src<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>E e <span class="token operator">:</span> src<span class="token punctuation">)</span>          <span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​       假设有一个实例化<code>Stack&lt;Number&gt;</code>的对象<code>stack</code>，<code>src</code>有<code>Iterable&lt;Integer&gt;</code>与 <code>Iterable&lt;Float&gt;</code>；在调用<code>pushAll</code>方法时会发生<code>type mismatch</code>错误，因为Java中泛型是不可变的，<code>Iterable&lt;Integer&gt;</code>与<code> Iterable&lt;Float&gt;</code>都不是<code>Iterable&lt;Number&gt;</code>的子类型。因此，应改为</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Wildcard type for parameter that serves as an E producer  </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushAll</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> src<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>E e <span class="token operator">:</span> src<span class="token punctuation">)</span>          <span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要实现<code>popAll(Collection&lt;E&gt; dst)</code>方法，将<code>Stack</code>中的元素依次取出<code>add</code>到<code>dst</code>中，如果不用通配符实现:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// popAll method without wildcard type - deficient!  </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">popAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>E<span class="token operator">></span> dst<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          dst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  同样地，假设有一个实例化<code>Stack&lt;Number&gt;</code>的对象<code>stack</code>，<code>dst</code>为<code>Collection&lt;Object&gt;</code>；调用popAll方法是会发生<code>type mismatch</code>错误，因为<code>Collection&lt;Object&gt;</code>不是<code>Collection&lt;Number&gt;</code>的子类型。因而，应改为：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">popAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> dst<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    dst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   在上述例子中，在调用<code>pushAll</code>方法时生产了<code>E 实例（produces E instances）</code>，在调用<code>popAll</code>方法时<code>dst</code>消费了<code>E 实例（consumes E instances）</code>。<code>Naftalin与Wadler将PECS称为Get and Put Principle</code>。</p><p>  java.util.Collections的copy方法(JDK1.7)完美地诠释了PECS：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> dest<span class="token punctuation">,</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> src<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> srcSize <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>srcSize <span class="token operator">></span> dest<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"Source does not fit in dest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcSize <span class="token operator">&lt;</span> COPY_THRESHOLD <span class="token operator">||</span>          <span class="token punctuation">(</span>src <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span> <span class="token operator">&amp;&amp;</span> dest <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>srcSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>              dest<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> src<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          ListIterator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> di<span class="token operator">=</span>dest<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ListIterator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> si<span class="token operator">=</span>src<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>srcSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              di<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              di<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>si<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通配符的副作用"><a href="#通配符的副作用" class="headerlink" title="通配符的副作用"></a>通配符的副作用</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//以盘子为例</span><span class="token keyword">class</span> <span class="token class-name">plate</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> T item<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Plate</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    item <span class="token operator">=</span> t<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    item <span class="token operator">=</span> t<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> item<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Fruit</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Apple</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上界&lt;? enteds T>只能取，不能存。</span><span class="token comment" spellcheck="true">//code block</span>Plate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token operator">></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">plate</span><span class="token operator">&lt;</span>Apple<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能存储任何元素；</span>p<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取出来的东西只能放在Fruit或者是它的基类里。</span>Fruit f <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object f1 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Apple af <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ERROR;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//其实锅都在编译器中：</p><p>原因是编译器只知道容器内是Fruit或者它的派生类，但具体是什么类型不知道。可能是Fruit？可能是Apple？也可能是Banana，RedApple，GreenApple？编译器在看到后面用Plate赋值以后，盘子里没有被标上有“苹果”。而是标上一个占位符：CAP#1，来表示捕获一个Fruit或Fruit的子类，具体是什么类不知道，代号CAP#1。然后无论是想往里插入Apple或者Meat或者Fruit编译器都不知道能不能和这个CAP#1匹配，所以就都不允许。</p><p>所以通配符<code>&lt;?&gt;</code>和类型参数的区别就在于，对编译器来说所有的<code>T</code>都代表同一种类型。比如下面这个泛型方法里，三个T都指代同一个类型，要么都是String，要么都是Integer。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">fill</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但通配符<code>&lt;?&gt;</code>没有这种约束，<code>Plate&lt;?&gt;</code>单纯的就表示：盘子里放了一个东西，是什么我不知道。</p><p>所以题主问题里的错误就在这里，<code>Plate&lt;？ extends Fruit&gt;</code>里什么都放不进去。</p><p> 下界<code>&lt;? super T&gt;</code>不影响往里存，但往外取只能放在Object对象里</p><p>使用下界&lt;? super Fruit&gt;会使从盘子里取东西的get( )方法部分失效，只能存放到Object对象里。set( )方法正常.</p><pre class="line-numbers language-java"><code class="language-java">p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Plate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存入元素正常</span>p<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取出来的东西只![KjDLw](../../../Desktop/KjDLw.png)能存放在Object类里。</span>Apple newFruit3<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Error</span>Fruit newFruit1<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Error</span>Object newFruit2<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为下界规定了元素的最小粒度的下限，实际上是放松了容器元素的类型控制。既然元素是Fruit的基类，那往里存粒度比Fruit小的都可以。但往外读取元素就费劲了，只有所有类的基类Object对象才能装下。但这样的话，元素的类型信息就全部丢失。</p><p>总结 PECS原则：</p><p>最后看一下什么是PECS（Producer Extends Consumer Super）原则，已经很好理解了：</p><ul><li><strong>频繁往外读取内容的，适合用上界Extends。</strong></li><li><strong>经常往里插入的，适合用下界Super。</strong></li></ul><p>The principles behind this in Computer Science is named after</p><ul><li>Covariance - ? extends MyClass,</li><li>Contravariance - ? super MyClass and</li><li>Invariance/non-Variance - MyClass</li></ul><p>The picture below should explain the concept.</p><p><img src="../../../Desktop/KjDLw.png" alt="KjDLw"></p><p>​                （图片来源 <a href="https://stackoverflow.com/users/2707792/andrey-tyukin%EF%BC%89">https://stackoverflow.com/users/2707792/andrey-tyukin）</a></p><p>TODO :好好理解一下PECS 原则？到底什么时候是生产，什么时候是消费。生产了什么与消费了什么？</p><h2 id="参考内容："><a href="#参考内容：" class="headerlink" title="参考内容："></a>参考内容：</h2><p>[1] <a href="http://www.cnblogs.com/drizzlewithwind/p/6100164.html%EF%BC%9B">http://www.cnblogs.com/drizzlewithwind/p/6100164.html；</a></p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java伪随机数与安全性</title>
      <link href="/2017/04/24/2017-04-24-%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%8E%E5%AE%89%E5%85%A8%E6%80%A7-2017/"/>
      <url>/2017/04/24/2017-04-24-%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%8E%E5%AE%89%E5%85%A8%E6%80%A7-2017/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="浅谈随机数与安全性"><a href="#浅谈随机数与安全性" class="headerlink" title="浅谈随机数与安全性"></a>浅谈随机数与安全性</h1><h2 id="强弱随机数"><a href="#强弱随机数" class="headerlink" title="强弱随机数"></a>强弱随机数</h2><p>真正的随机数是使用武物理现象产生的，例如投掷硬币，转轮，电子白噪声等等，这些随机数的发生器都是物理性的，计算机很难去模拟着种情况。</p><p>在实际的应用过程当中，往往使用伪随机数就足够了。这些数外表看起来是随机的，但是他们都是固定的可以重复计算出来的。这就造成了一定的安全隐患。</p><p>例如，网站通过发送电子信箱的链接来重置密码，等等。</p><p>随机数又有强弱之分，比如弱一点的可以使用当前的时间戳来作为随机数，而起那个随机数则相对比价安全，例如使用系统当前内存占用情况作为随机数。</p><p>在Java中，弱伪随机数一般使用java.util.Random类来生成</p><pre class="line-numbers language-java"><code class="language-java">        Random rondom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        rondom<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们来看一下内部的原理。</p><p>首先是初始化Random对象的时候，传入了一个seed</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Construct a random generator with the given &amp;#123;@code seed&amp;#125; as the     * initial state. Equivalent to &amp;#123;@code Random r = new Random(); r.setSeed(seed);&amp;#125;.     *     * &lt;p>This constructor is mainly useful for &lt;i>predictability&lt;/i> in tests.     * The default constructor is likely to provide better randomness.     */</span>    <span class="token keyword">public</span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token keyword">long</span> seed<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setSeed</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//看一下setSeed源码</span>    <span class="token comment" spellcheck="true">/**     * Modifies the seed using a linear congruential formula presented in &lt;i>The     * Art of Computer Programming, Volume 2&lt;/i>, Section 3.2.1.     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token keyword">long</span> seed<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seed <span class="token operator">=</span> <span class="token punctuation">(</span>seed <span class="token operator">^</span> multiplier<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>1L <span class="token operator">&lt;&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        haveNextNextGaussian <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//multiplier这个是一个静态常量</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> multiplier <span class="token operator">=</span> 0x5deece66dL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再看一下nextBytes的实现</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextBytes</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rand <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> loop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>loop <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                rand <span class="token operator">=</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                loop <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                loop<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            buf<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> rand<span class="token punctuation">;</span>            rand <span class="token operator">>>=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里面用到了nextInt，再跟踪一下代码</span>    <span class="token comment" spellcheck="true">/**     * Returns a pseudo-random uniformly distributed &amp;#123;@code int&amp;#125;.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继续跟到next</span>    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span> bits<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        seed <span class="token operator">=</span> <span class="token punctuation">(</span>seed <span class="token operator">*</span> multiplier <span class="token operator">+</span> 0xbL<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>1L <span class="token operator">&lt;&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>seed <span class="token operator">>>></span> <span class="token punctuation">(</span><span class="token number">48</span> <span class="token operator">-</span> bits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//其实这个就是最基本的实现了</span><span class="token comment" spellcheck="true">//原理上就是通过种子数的操作，重新生成一个处理后返回，然后种子数继续用，所以如果知道你的种子数，那么这个随机数就是可预测的了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想使用相对安全的随机数，可以使用java.security.SecureRandom类</p><pre class="line-numbers language-java"><code class="language-java">String tempId <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tempIdBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成48位强伪随机数</span>random<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span>leftBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>random<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span>rightBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java-UUID"><a href="#Java-UUID" class="headerlink" title="Java UUID"></a>Java UUID</h2><h3 id="GUID"><a href="#GUID" class="headerlink" title="GUID"></a>GUID</h3><p>GUID是一个128位长的数字，一般用16进制表示。算法的核心思想是结合机器的网卡、当地时间、一个随即数来生成GUID。从理论上讲，如果一台机器每秒产生10000000个GUID，则可以保证（概率意义上）3240年不重复。</p><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>UID(Universally Unique Identifier)全局唯一标识符,是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的。按照开放软件基金会(OSF)制定的标准计算，用到了以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字。由以下几部分的组合：当前日期和时间(UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同)，时钟序列，全局唯一的IEEE机器识别号（如果有网卡，从网卡获得，没有网卡以其他方式获得），UUID的唯一缺陷在于生成的结果串会比较长。 </p><p>可以看出，UUID 是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的。通常平台会提供生成的API。按照开放软件基金会(OSF)制定的标准计算，用到了以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字</p><p>　　UUID由以下几部分的组合：</p><p>　　（1）当前日期和时间，UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同。</p><p>　　（2）时钟序列</p><p>　　（3）全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得。</p><h3 id="UUID的版本"><a href="#UUID的版本" class="headerlink" title="UUID的版本"></a>UUID的版本</h3><p>UID具有多个版本，每个版本的算法不同，应用范围也不同。</p><p>首先是一个特例－－Nil UUID－－通常我们不会用到它，它是由全为0的数字组成，如下：</p><p>00000000-0000-0000-0000-000000000000</p><p>UUID Version 1：基于时间的UUID</p><p>基于时间的UUID通过计算当前时间戳、随机数和机器MAC地址得到。由于在算法中使用了MAC地址，这个版本的UUID可以保证在全球范围的唯一性。但与此同时，使用MAC地址会带来安全性问题，这就是这个版本UUID受到批评的地方。如果应用只是在局域网中使用，也可以使用退化的算法，以IP地址来代替MAC地址－－Java的UUID往往是这样实现的（当然也考虑了获取MAC的难度）。</p><p>UUID Version 2：DCE安全的UUID</p><p>DCE（Distributed Computing Environment）安全的UUID和基于时间的UUID算法相同，但会把时间戳的前4位置换为POSIX的UID或GID。这个版本的UUID在实际中较少用到。</p><p>UUID Version 3：基于名字的UUID（MD5）</p><p>基于名字的UUID通过计算名字和名字空间的MD5散列值得到。这个版本的UUID保证了：相同名字空间中不同名字生成的UUID的唯一性；不同名字空间中的UUID的唯一性；相同名字空间中相同名字的UUID重复生成是相同的。</p><p>UUID Version 4：随机UUID</p><p>根据随机数，或者伪随机数生成UUID。这种UUID产生重复的概率是可以计算出来的，但随机的东西就像是买彩票：你指望它发财是不可能的，但狗屎运通常会在不经意中到来。</p><p>UUID Version 5：基于名字的UUID（SHA1）</p><p>和版本3的UUID算法类似，只是散列值计算使用SHA1（Secure Hash Algorithm 1）算法。</p><p>参考文档：</p><p><a href="http://www.cnblogs.com/jdonson/archive/2009/07/22/1528466.html">JAVA UUID的生成</a></p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语义化版本</title>
      <link href="/2017/04/24/2017-04-24-%E5%A6%82%E4%BD%95%E5%91%BD%E5%90%8D%E7%89%88%E6%9C%AC%E5%8F%B7-2017/"/>
      <url>/2017/04/24/2017-04-24-%E5%A6%82%E4%BD%95%E5%91%BD%E5%90%8D%E7%89%88%E6%9C%AC%E5%8F%B7-2017/</url>
      
        <content type="html"><![CDATA[<p>转载： <a href="http://semver.org/lang/zh-CN/">http://semver.org/lang/zh-CN/</a></p><h1 id="语义化版本-2-0-0"><a href="#语义化版本-2-0-0" class="headerlink" title="语义化版本 2.0.0"></a>语义化版本 2.0.0</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ol><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。</li></ol><p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的套件越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。</p><p>在依赖高的系统中发布新版本套件可能很快会成为恶梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个相依套件改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本相依被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。</p><p>作为这个问题的解决方案之一，我提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据（但不局限于）已经被各种封闭、开放源码软件所广泛使用的惯例所设计。为了让这套理论运作，你必须先有定义好的公共 API 。这可以透过文件定义或代码强制要求来实现。无论如何，这套 API 的清楚明了是十分重要的。一旦你定义了公共 API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。</p><p>我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。</p><h2 id="语义化版本控制规范（SemVer）"><a href="#语义化版本控制规范（SemVer）" class="headerlink" title="语义化版本控制规范（SemVer）"></a>语义化版本控制规范（SemVer）</h2><p>以下关键词 MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照 RFC 2119 的叙述解读。（译注：为了保持语句顺畅， 以下文件遇到的关键词将依照整句语义进行翻译，在此先不进行个别翻译。）</p><ol><li><p>使用语义化版本控制的软件“必须 MUST ”定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。</p></li><li><p>标准的版本号“必须 MUST ”采用 XYZ 的格式，其中 X、Y 和 Z 为非负的整数，且“禁止 MUST NOT”在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素“必须 MUST ”以数值来递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</p></li><li><p>标记版本号的软件发行后，“禁止 MUST NOT ”改变该版本软件的内容。任何修改都“必须 MUST ”以新版本发行。</p></li><li><p>主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。</p></li><li><p>1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。</p></li><li><p>修订号 Z（x.y.Z <code>|</code> x &gt; 0）“必须 MUST ”在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。</p></li><li><p>次版本号 Y（x.Y.z <code>|</code> x &gt; 0）“必须 MUST ”在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也“必须 MUST ”递增。也“可以 MAY ”在内部程序有大量新功能或改进被加入时递增，其中“可以 MAY ”包括修订级别的改变。每当次版本号递增时，修订号“必须 MUST ”归零。</p></li><li><p>主版本号 X（X.y.z <code>|</code> X &gt; 0）“必须 MUST ”在有任何不兼容的修改被加入公共 API 时递增。其中“可以 MAY ”包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号“必须 MUST ”归零。</p></li><li><p>先行版本号“可以 MAY ”被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 码的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。数字型的标识符号“禁止 MUST NOT ”在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法达到兼容的需求。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。</p></li><li><p>版本编译信息“可以 MAY ”被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。当判断版本的优先层级时，版本编译信息“可 SHOULD ”被忽略。因此当两个版本只有在版本编译信息有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。</p></li><li><p>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，“必须 MUST ”把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译信息不在这份比较的列表中）。由左到右依序比较每个标识符号，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级“必须 MUST ”透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定：只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符号比非数字的标识符号优先层级低。若开头的标识符号都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0- rc.1 &lt; 1.0.0。</p></li></ol><h2 id="为什么要使用语义化的版本控制？"><a href="#为什么要使用语义化的版本控制？" class="headerlink" title="为什么要使用语义化的版本控制？"></a>为什么要使用语义化的版本控制？</h2><p>这并不是一个新的或者革命性的想法。实际上，你可能已经在做一些近似的事情了。问题在于只是“近似”还不够。如果没有某个正式的规范可循，版本号对于依赖的管理并无实质意义。将上述的想法命名并给予清楚的定义，让你对软件使用者传达意向变得容易。一旦这些意向变得清楚，弹性（但又不会太弹性）的依赖规范就能达成。</p><p>举个简单的例子就可以展示语义化的版本控制如何让依赖地狱成为过去。假设有个名为“救火车”的函式库，它需要另一个名为“梯子”并已经有使用语义化版本控制的套件。当救火车创建时，梯子的版本号为 3.1.0。因为救火车使用了一些版本 3.1.0 所新增的功能， 你可以放心地指定相依于梯子的版本号大等于 3.1.0 但小于 4.0.0。这样，当梯子版本 3.1.1 和 3.2.0 发布时，你可以将直接它们纳入你的套件管理系统，因为它们能与原有相依的软件兼容。</p><p>作为一位负责任的开发者，你理当确保每次套件升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全的方式来发行以及升级套件，而无需推出新的相依套件，节省你的时间及烦恼。</p><p>如果你对此认同，希望立即开始使用语义化版本控制，你只需声明你的函式库正在使用它并遵循这些规则就可以了。请在你的 README 文件中保留此页连结，让别人也知道这些规则并从中受益。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="在-0-y-z-初始开发阶段，我该如何进行版本控制？"><a href="#在-0-y-z-初始开发阶段，我该如何进行版本控制？" class="headerlink" title="在 0.y.z 初始开发阶段，我该如何进行版本控制？"></a>在 0.y.z 初始开发阶段，我该如何进行版本控制？</h3><p>最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。</p><h3 id="如何判断发布-1-0-0-版本的时机？"><a href="#如何判断发布-1-0-0-版本的时机？" class="headerlink" title="如何判断发布 1.0.0 版本的时机？"></a>如何判断发布 1.0.0 版本的时机？</h3><p>当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。</p><h3 id="这不会阻碍快速开发和迭代吗？"><a href="#这不会阻碍快速开发和迭代吗？" class="headerlink" title="这不会阻碍快速开发和迭代吗？"></a>这不会阻碍快速开发和迭代吗？</h3><p>主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。</p><h3 id="对于公共-API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到-42-0-0-版？"><a href="#对于公共-API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到-42-0-0-版？" class="headerlink" title="对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？"></a>对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？</h3><p>这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。</p><h3 id="为整个公共-API-写文件太费事了！"><a href="#为整个公共-API-写文件太费事了！" class="headerlink" title="为整个公共 API 写文件太费事了！"></a>为整个公共 API 写文件太费事了！</h3><p>为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。</p><h3 id="万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？"><a href="#万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？" class="headerlink" title="万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？"></a>万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？</h3><p>一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。</p><h3 id="如果我更新了自己的依赖但没有改变公共-API-该怎么办？"><a href="#如果我更新了自己的依赖但没有改变公共-API-该怎么办？" class="headerlink" title="如果我更新了自己的依赖但没有改变公共 API 该怎么办？"></a>如果我更新了自己的依赖但没有改变公共 API 该怎么办？</h3><p>由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的套件有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。</p><h3 id="如果我变更了公共-API-但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）"><a href="#如果我变更了公共-API-但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）" class="headerlink" title="如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）"></a>如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）</h3><p>自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。</p><h3 id="我该如何处理即将弃用的功能？"><a href="#我该如何处理即将弃用的功能？" class="headerlink" title="我该如何处理即将弃用的功能？"></a>我该如何处理即将弃用的功能？</h3><p>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。</p><h3 id="语义化版本对于版本的字串长度是否有限制呢？"><a href="#语义化版本对于版本的字串长度是否有限制呢？" class="headerlink" title="语义化版本对于版本的字串长度是否有限制呢？"></a>语义化版本对于版本的字串长度是否有限制呢？</h3><p>没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。</p><p>版本号后缀：</p><p>alpha：功能上实现阶段，BUG较多，功能不完善。</p><p>beta：解决主要错误，完善功能，需进行测试进一步优化。</p><p>RC：在beta基础上的进一步完善，release之前的版本。</p><p>release：最终版本，该版本最终交付给用户使用。命名为R，例如1.1.1_R(r)</p><p>举个🌰：</p><p>主版本号.次版本号.修订版本号.日期版本号_希腊字母版本号</p><p>希腊字母版本号：base alpha beta RC release</p><p>日期版本号：20160403</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建仓库与管理器</title>
      <link href="/2017/04/24/2017-04-24-%E6%9E%84%E5%BB%BA%E4%BB%93%E5%BA%93%E4%B8%8E%E7%AE%A1%E7%90%86%E5%99%A8-2017/"/>
      <url>/2017/04/24/2017-04-24-%E6%9E%84%E5%BB%BA%E4%BB%93%E5%BA%93%E4%B8%8E%E7%AE%A1%E7%90%86%E5%99%A8-2017/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="构建仓库与管理器"><a href="#构建仓库与管理器" class="headerlink" title="构建仓库与管理器"></a>构建仓库与管理器</h1><h2 id="什么是中央仓库"><a href="#什么是中央仓库" class="headerlink" title="什么是中央仓库"></a>什么是中央仓库</h2><blockquote><p>在中央仓库出现以前，一个工程往往需要引用一些库，那这些库就放在工程的一个lib文件夹下面。每次新建一个工程，你都要拷贝这些库到lib文件夹下面，这就造成了一个问题。一个工程的库文件可能需要更新，这就要靠手动的更新；不同工程引用相同的库文件，都要拷贝一份。</p><p>尤其当这个工程需要使用GIt或SVN进行版本管理的时候，这些lib就成了一个噩梦。</p></blockquote><p>当maven仓库出现以后呢？</p><p>这个中央仓库就是存放这些库的地方，当你需要引用这些库文件的时候，只是需要在工程中写一条语句就可以了。</p><p>举个栗子，在Android中，如果想引用一个包需要怎么写呢：</p><pre class="line-numbers language-groovy"><code class="language-groovy">    compile <span class="token string">'com.android.support:design:23.2.0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就这么简单。</p><p>gradle会自行将在中央仓库中查找该库的相应版本下载到本地，并添加到项目依赖中，编译时会将该库文件一并编译进去。</p><p>用这样的方式来管理依赖，可以非常的安装卸载依赖，并且升级也很简单；同时，由于使用脚本语言，避免了git直接保存jar/aar的快照，而是追踪了脚本的变化，对于版本管理也非常方便。</p><p>综上所述：Maven仓库就是放置所有JAR文件（WAR，ZIP，POM等等）的地方，所有Maven项目可以从同一个Maven仓库中获取自己所需要的依赖JAR，这节省了磁盘资源。此外，由于Maven仓库中所有的JAR都有其自己的坐标，该坐标告诉Maven它的组ID，构件ID，版本，打包方式等等，因此Maven项目可以方便的进行依赖版本管理。你也不在需要提交JAR文件到SCM仓库中，你可以建立一个组织层次的Maven仓库，供所有成员使用。</p><p>Maven仓库能帮助我们管理构件（主要是JAR）。</p><span id="more"></span><h2 id="远程仓库与本地仓库"><a href="#远程仓库与本地仓库" class="headerlink" title="远程仓库与本地仓库"></a>远程仓库与本地仓库</h2><p>运行Maven的时候，Maven所需要的任何构件都是直接从本地仓库获取的。如果本地仓库没有，它会首先尝试从远程仓库下载构件至本地仓库，然后再使用本地仓库的构件。</p><p>比如说，你的项目配置了junit-3.8的依赖，在你运行<strong>mvn test</strong> 的时候，Maven需要使用junit-3.8的jar文件，它首先根据坐标查找本地仓库，如果找到，就直接使用。如果没有，Maven会检查可用的远程仓库配置，然后一次尝试从这些远程仓库下载junit-3.8的依赖，如果找到了就下载下来使用，如果没有则会报错。</p><blockquote><p>在Android中，gradle会将文件下载到.gralde/cache/moduleXX这个文件夹下面，在gradle引用项目时，先从这里找，如果没有，则在指定的maven远程仓库中获取。</p></blockquote><p>指定远程仓库</p><p>如果想在Android中指定可以使用</p><pre class="line-numbers language-groovy"><code class="language-groovy">allprojects<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  repositories<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//本地仓库</span>    <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//jcenter</span>    maven<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      url <span class="token string">'your_remote_repository_url'</span> <span class="token comment" spellcheck="true">//指定一个远程仓库</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//注意 allprojects声明的是该工程以及工程的子工程。</p><p>//而在buildScript中声明的repositories仅仅是对于build.gradle脚本本身的声明.(脚本也是调用gradle的API,因此会以来一些文件).</p><p>上传aar包到指定的仓库</p><pre class="line-numbers language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'maven'</span><span class="token comment" spellcheck="true">//应用maven插件，这个插件会自动帮你做一些事情</span>description <span class="token string">"unionid"</span><span class="token comment" spellcheck="true">//项目的包名称</span>group <span class="token operator">=</span> project<span class="token operator">.</span><span class="token punctuation">[</span>your defined group<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//group id 类似于com.xxx.xxx;</span><span class="token comment" spellcheck="true">//version = '0.1.6-SNAPSHOT'</span>version <span class="token operator">=</span> project<span class="token operator">.</span><span class="token punctuation">[</span>your defined version<span class="token punctuation">]</span>uploadArchives <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    repositories <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        mavenDeployer <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">repository</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token string">"your_url"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">authentication</span><span class="token punctuation">(</span>userName<span class="token punctuation">:</span><span class="token string">'your_usr_name'</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span><span class="token string">'your_password'</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些项目的属性都在gradle.properties中定义</p><pre><code>VERSION_NAME=VERSION_CODE=GROUP=</code></pre><blockquote><p>题外话</p><p>Gradle支持从maven中央仓库和JCenter上获取构件，那这两者有什么区别呢？</p><p>maven中央仓库（<a href="http://repo1.maven.org/maven2/">http://repo1.maven.org/maven2/</a>）是由Sonatype公司提供的服务，它是Apache Maven、SBT和其他构建系统的默认仓库，并能很容易被Apache Ant/Ivy、Gradle和其他工具所使用。开源组织例如Apache软件基金会、Eclipse基金会、JBoss和很多个人开源项目都将构件发布到中央仓库。 maven中央仓库已经将内容浏览功能禁掉了，可在<a href="http://search.maven.org/">http://search.maven.org/</a>查询构件。</p><p><a href="https://bintray.com/bintray/jcenter'%3EJCenter%3C/a%3E%EF%BC%88%3Ca%20href=">https://jcenter.bintray.com</a> ）是由JFrog公司提供的Bintray中的Java仓库。它是当前世界上最大的Java和Android开源软件构件仓库。 所有内容都通过内容分发网络（CDN）使用加密https连接获取。JCenter是<a href="http://groovy.codehaus.org/Grape">Goovy Grape</a>内的默认仓库，Gradle内建支持（jcenter()仓库），非常易于在（可能除了Maven之外的）其他构建工具内进行配置。</p><p>JCenter相比mavenCenter构件更多，性能也更好。但还是有些构件仅存在mavenCenter中。</p></blockquote><h2 id="常见工具说明"><a href="#常见工具说明" class="headerlink" title="常见工具说明"></a>常见工具说明</h2><p>使用Maven，可以从<a href="http://repo1.maven.org/maven2/">Maven中央仓库</a>下载所需要的构件（artifact），但这通常不是一个好的做法，一般是在企业内部架设一个Maven仓库服务器，在代理远程仓库的同时维护本地仓库，以节省带宽和时间。企业仓库管理器一般可以提供高并发访问、浏览和查询、报表、访问控制、备份、对其他仓库进行代理、REST API等特性</p><p>了解一下构件仓库管理器，市场上最好的是JFrog的<a href="http://www.jfrog.com/#os-arti">Artifactory</a>和Sonatype的<a href="http://www.sonatype.org/nexus/">Nexus</a>，而且这两个产品既有商业版也有免费社区版。</p><p>以Artifactory为例，Ant+Ivy、Maven和Gradle这些构建工具都可以自动下载Artifactory里的构件（artifact），此外Jenkins、Bamboo等CI工具也可以通过构建工具将生成的构件（artifact）部署到Artifactory上。</p><p>一张图片看懂：</p><p><img src="/img/java/maven.jpeg" alt="maven"></p><p>参考文档：</p><p><a href="http://blog.sina.com.cn/s/blog_72ef7bea0102vq0k.html">了解构建仓库管理器Artifactory和Nexus</a></p><p><a href="http://blog.sina.com.cn/s/blog_72ef7bea0102vvqg.html">聊一聊MavenCenter和JCenter</a></p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈Android组件的生命周期</title>
      <link href="/2017/03/31/2017-03-31-Android%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-2017/"/>
      <url>/2017/03/31/2017-03-31-Android%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-2017/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Android组件生命周期"><a href="#Android组件生命周期" class="headerlink" title="Android组件生命周期"></a>Android组件生命周期</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h2 id="Application的生命周期"><a href="#Application的生命周期" class="headerlink" title="Application的生命周期"></a>Application的生命周期</h2><h2 id="四大组件的生命周期"><a href="#四大组件的生命周期" class="headerlink" title="四大组件的生命周期"></a>四大组件的生命周期</h2><h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><p>A-&gt;B</p><pre class="line-numbers language-java"><code class="language-java">A<span class="token operator">-</span><span class="token operator">></span>onCreate<span class="token punctuation">;</span>A<span class="token operator">-</span><span class="token operator">></span>onStart<span class="token punctuation">;</span>A<span class="token operator">-</span><span class="token operator">></span>onResume<span class="token punctuation">;</span>A<span class="token operator">-</span><span class="token operator">></span>onPause<span class="token punctuation">;</span>B<span class="token operator">-</span><span class="token operator">></span>onCreate<span class="token punctuation">;</span>B<span class="token operator">-</span><span class="token operator">></span>onStart<span class="token punctuation">;</span>B<span class="token operator">-</span><span class="token operator">></span>onResume<span class="token punctuation">;</span>A<span class="token operator">-</span><span class="token operator">></span>onStop<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Service生命周期"><a href="#Service生命周期" class="headerlink" title="Service生命周期"></a>Service生命周期</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="Fragment生命周期"><a href="#Fragment生命周期" class="headerlink" title="Fragment生命周期"></a>Fragment生命周期</h3><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><h4 id="关于Activity生命周期onDestroy未能执行导致的内存泄漏问题？"><a href="#关于Activity生命周期onDestroy未能执行导致的内存泄漏问题？" class="headerlink" title="关于Activity生命周期onDestroy未能执行导致的内存泄漏问题？"></a>关于Activity生命周期onDestroy未能执行导致的内存泄漏问题？</h4><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"287314570e232c0e401f","clientSecret":"bb261daec807b4f3dd21e7161f4fbbc7f1a546ab","repo":"hefuduo.github.io","owner":"hefuduo","admin":"hefuduo"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> Android基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Android -四大组件 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
