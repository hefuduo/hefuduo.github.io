---
layout:     post
title:      "String, StringBuilder and StringBuffer"
subtitle:   "字符串"
date:       2019-05-15 11:19:00
author:     "LeoHe"
header-img: "img/post-bg-2015.jpg"
tags:
    - Java
	- 基础知识
---

[TOC]

# Java 字符串



## 需要注意的地方

1. 字符串是不可变的
2. 所有对字符串的操作都会生成新的字符串
3. 字符串常量相加编译器会有所优化



SHOW THE CODE



```java
String a = "hello world";
String b = "hello " + "world";
sout(a = b);
//true
//因为a和b指向内存同一块区域
String c = new String("hello world");
sout(a = c);
//false 因为c指向了一个新对象;


String aSub = a.subString(0, a.length-1);
sout(aSub = a);
//false 返回了新的字符串

//line 2 : 编译器会将b直接优化成字符串常量, 因为b的值在编译时就确认了
```

## String,  StringBuilder 和StringBuffer



```java
String s = "";
for(int i = -; i < 100; i ++){
  s += "hello";
}

//这段代码编译成的字节码
LINENUMBER 33 L7
   FRAME SAME
    LDC ""
    ASTORE 3
   L13
    LINENUMBER 34 L13
    ICONST_0
    ISTORE 4
   L14
   FRAME APPEND [java/lang/String I]
    ILOAD 4
    BIPUSH 100
    IF_ICMPGE L15
   L16
    LINENUMBER 35 L16
    NEW java/lang/StringBuilder
    DUP
    INVOKESPECIAL java/lang/StringBuilder.<init> ()V
    ALOAD 3
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    LDC "hello"
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    INVOKEVIRTUAL java/lang/StringBuilder.toString ()Ljava/lang/String;
    ASTORE 3
   L17
    LINENUMBER 34 L17
    IINC 4 1
    GOTO L14
   L15
    LINENUMBER 37 L15
   FRAME CHOP 1
    RETURN

//可以看出使用StringBuilder来构建新的字符串, 每次循环都执行了new StringBuilder(), 调用StringBuild#append方法, 再StringBuilder#toString()方法,在循环中会产生大量的临时对象.
//如果使用StringBuilder

StringBuilder b = new StringBuild();s
for(int i = 0; i < 100; i ++){
	b.append("hello");
}
sout(b);

//减少临时对象的生成.

//StringBuffer的源码中操作都加了synchronized ,所以StringBuffer与StringBuilder的区别是前者是线程安全的, 后者是线程不安全的. 两个类都继承自 AbstractStringBuilder.
```

