---
layout:     post
title:      "java学习笔记6"
subtitle:   "访问权限控制"
date:       2016-12-8 10:20:20
author:     "LeoHe"
header-img: "img/post-bg-2015.jpg"
tags:
    - Java
---

# 第六章 访问权限控制

## Java访问权限修饰词

总结：
>无论是在什么样的关系中，设立一些为各成员所遵守的接线始终是很重要的。当创建了一个类库，也就与该类库的用户建立了某种关系，这些用户就是客户端程序员，他们是另外一些程序员，他们将你的类库聚合称谓一个应用程序，或是运用你的类库来和创建一个更大的类库。


```java
//this class is package accessable;
class InnerPackage{
    private int mInnerClassAccessField;
    protected int mInnerPackageAccessField;
    public int mExternalAccessFiedl;
    private void innerAccessMethod(){
        //statement
    }
    protected void innerPackageAccessMethod(){
        //statement
    }
    public void externalAccessMethod(){

    }
}
```

** 控制对成员的访问权限有两个原因**

* 为了让用户不要配出那些他们不该碰触的部分。
* 为了让类库设计者可以更改类的内部工作方式，而不必担心这样会对客户端程序员产生重大的影响，例如，升级了某些类库，不会导致程序编译出错。




** 针对以上 对于Java文件书写格式，除了命名规范外，访问限制也可以作为书写格式的参考**


```java
public class JavaFileFormatExample{

    //方法区
    //公有方法区
    //构造器

    public void Func1(){
         //statement
    }
    //public native void Func2(){
        //statement
    }

    //包内方法区
    public void tFunc1(){
        //statement
    }

    protected void tFunc2(){
        //statement
    }

    //私有方法区
    private void sFunc1(){
        //statement
    }

    private native void sFunc2(){
        //statement
    }

    //域区
    //公有域
    
    //包内域
    
    //私有域
    
    
    //静态初始化区
    static{
        //statement
    }
    //初始化代码块
    {
        //statement
    }

    //内部类区
    class InnerClass{

    }
}
```

这种书写格式，可以非常清晰的看到该类对外暴露的接口是什么，该类主要能实现哪些功能，非常清晰。

对于格式化工具，可参考AndroidStudio的一个Activity生命周期格式化工具，LifeCycle-sorter.
连接：[生命周期格式化插件](https://github.com/armandAkop/Lifecycle-Sorter)

